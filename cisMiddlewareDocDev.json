{
  "openapi": "3.0.3",
  "info": {
    "title": "CIS Middleware Documentation",
    "description": "The purpose of this document is to describe data communication between Aggregator/Partner and GDIC CIS system\\n\\n\\n\\nAPI is designed to accept service request in JSON format over HTTPS. JSON message is the body of HTTPS-GET or HTTPS-POST request. Once the request is processed, response is also provided in JSON format. Please note that content type and user authentication must be provided in the HTTPS-POST request. In authentication response client will get an access token. Access token will be needed for any other API calling of CIS middleware.",
    "contact": {
      "name": "GDIC IT",
      "url": "https://green-delta.com",
      "email": "itdev@green-delta.com"
    },
    "license": {},
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://cisdev.green-delta.com",
      "description": "Production"
    },
    {
      "description": "Sandbox",
      "url": "https://cisdev.green-delta.com"
    }
  ],
  "tags": [
    {
      "name": "Agent",
      "description": "Agent Controller"
    },
    {
      "name": "Claims",
      "description": "Claims Controller"
    },
    {
      "name": "Customer",
      "description": "Customer Controller"
    },
    {
      "name": "Document",
      "description": "Document Master Controller"
    },
    {
      "name": "LIMS",
      "description": "Agri Lims Controller"
    },
    {
      "name": "Money Receipt",
      "description": "Money Receipt Controller"
    },
    {
      "name": "Product",
      "description": "Product Controller"
    },
    {
      "name": "Quotation",
      "description": "Get Product Quotation Controller"
    },
    {
      "name": "User",
      "description": "User Login Controller"
    }
  ],
  "paths": {
    "/api/agent/get-agent-by-agencycode-for-crm": {
      "post": {
        "tags": [
          "Agent"
        ],
        "summary": "Search Agent By AgencyCode - CRM",
        "description": "if agent found this will return agent information along with all his/her related documents",
        "operationId": "getAgentInfoByAgencyCodeUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Agent Request Model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Agent response with related documents»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/lims/doCommand": {
      "post": {
        "tags": [
          "LIMS"
        ],
        "summary": "Agri LIMS Request",
        "description": "Receive LIMS request from LIMS portal",
        "operationId": "agriLimsRequestUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/claims/get-claim-by-claim-loss-id-for-crm": {
      "post": {
        "tags": [
          "Claims"
        ],
        "summary": "Search Claims By ClaimsLossId - CRM",
        "description": "Get claims loss information by claimsLossId",
        "operationId": "getClaimsDetailsByClaimsNumberForCRMUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Claims Request Model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«ClaimsResponseCRMIndividualVM»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/claims/loss-claim-merge": {
      "post": {
        "tags": [
          "Claims"
        ],
        "summary": "Get TPA Loss Claims Request",
        "description": "Receive and Sync Loss Claim's data From TPA",
        "operationId": "LossClaimsDataSyncUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«ClaimsMergeResponse»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/claims/paid-claim-merge": {
      "post": {
        "tags": [
          "Claims"
        ],
        "summary": "Get TPA Paid Claim Request",
        "description": "Receive and Sync Paid Claim's data From TPA",
        "operationId": "paidClaimsDataSyncUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«ClaimsMergeResponse»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/claims/rejected-claim-merge": {
      "post": {
        "tags": [
          "Claims"
        ],
        "summary": "Get TPA Rejected Claim Request",
        "description": "Receive and Sync Rejected Claim's data From TPA",
        "operationId": "regectedClaimsDataSyncUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«ClaimsMergeResponse»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/add-customer": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Add A New Customer",
        "description": "Add a new customer and if successfull return a successfull message otherwise return error code and message.",
        "operationId": "addCustomerUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer Information"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object«Map«string,object»»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/search-customer": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Search Customer by search parameteres",
        "description": "Returns available customer by given parameters ex:(customerType, GroupCode, searchText etc.), when customer not found returns empty.",
        "operationId": "searchCustomerUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Search Customer Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object«Customer Response Body»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/search-customer-crm": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Search Customer by Mobile/Document No - CRM",
        "description": "Returns available customer by given parameters ex:(mobile number, document number), when customer not found returns empty.",
        "operationId": "searchCustomerForCRMUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CRMCustomerRequestVM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object«Customer Response Body For CRM»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/add-master-document": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Save document",
        "description": "Returns id, document number, Money Receipt number and PDF URL after save.",
        "operationId": "addMasterDocumentUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "data"
                ],
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "description": "The request body of 'add-master-document-dummy' API contains specific JSON format for 'data' parameter. It encapsulates information necessary for the API to process the request and produce the desired outcome. The 'data' parameter will contain specific JSON of the schema 'Add Document Request', Otherwise this will throw error or will not save the document."
                  },
                  "files": {
                    "type": "array",
                    "description": "This is an optional field to upload raw file/files (Max file size: 2MB). Format ex: PDF, JPG, PNG etc ",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "data": {
                  "contentType": "text/plain"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Save Master Document Response»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/add-master-document-dummy": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Save document dummy",
        "description": "This is a dummy API only for showing the request body of 'add-master-document' - 'data' parameter.It doesn't do anything functional activity through CIS MIDDLEWARE.",
        "operationId": "addMasterDocumentTestUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Add Document Request"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Add Document Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object«Save Master Document Response»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/get-document-by-document-number": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Get Document Details by document Number",
        "description": "Returns the list of Document pre requsite.",
        "operationId": "getDocumentByDocumentNumberUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocNoVm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«UnderwritingResponseVm»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/get-document-by-document-number-for-crm": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Search Document By DocNo - CRM",
        "description": "Returns Document by search text/keywords with associated data like claims, nominee etc.",
        "operationId": "getDocumentByDocumentNumberForCRMUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocNoVm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Underwriting Document Response for CRM»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/save-document-pre-requisite": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Save Document Pre Requisite",
        "description": "After receiving a quotation, if a customer wishes to purchase the policy, certain input is required from the customer. This API, when called, dynamically populates the pre-required data necessary for policy purchase. The pre-requisite data is specific to the product and must be provided in the subsequent save API call to complete the purchase process.",
        "operationId": "getDocumentPreRequisiteUsingGET",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Quotation Prerequsite Response»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/search-master-document-with-pagination": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Returns document with details by search text",
        "description": "Returns the list of Document by search text/keywords.",
        "operationId": "searchMasterDocumentWithPaginationForMiddlewareUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MiddlewareSearchDocVm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«SearchMasterDocumentResponse»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/get-quotation": {
      "post": {
        "tags": [
          "Quotation"
        ],
        "summary": "Get Quotation",
        "description": "Returns specific product's quotation. Estimated cost for insurance coverage, outlining terms, premiums, and coverage details for consideration.",
        "operationId": "getQuotationUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Get Quotation Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Get Quotation Response»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/get-quotation-pre-requisite": {
      "get": {
        "tags": [
          "Quotation"
        ],
        "summary": "Get Quotation Pre Requisite",
        "description": "In order to get product quotation information, the user need to fillup some product specific data, which can be text field or drowdown. This API, when called, dynamically populates the pre-required data necessary for get quotation.",
        "operationId": "getQuotationPreRequisiteUsingGET",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Quotation Prerequsite Response»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/get-money-receipt-by-mr-number": {
      "get": {
        "tags": [
          "Money Receipt"
        ],
        "summary": "Get Money Receipt Details by MR Number",
        "description": "Retrieve financial transaction details using unique Money Receipt number identifier.",
        "operationId": "getMoneyReceiptDetailsByMrNumberUsingGET",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mrNumber",
            "in": "query",
            "description": "mrNumber",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«AccMoneyReceiptVm»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/get-product-list": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product",
        "description": "Returns the list of the allowed products for showcasing with the product details like features, coverage, exclusions and also pre-requisite data list for getting quotations.",
        "operationId": "getProductListUsingGET",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data Object Single«Get Product List Response»"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/refresh-auth-token": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Refresh token",
        "description": "\"Refresh Token\" is a crucial operation that facilitates prolonged user sessions. It allows users to obtain a new access token without re-entering their credentials. This operation takes a valid refresh token as input and, if authenticated, issues a fresh access token, maintaining the user's authenticated state. By seamlessly refreshing tokens, this operation enhances security and user experience by minimizing the need for frequent logins while ensuring continuous access to protected resources.",
        "operationId": "refrestAuthTokenUsingGET",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User Authentication Response After Successfull Authentication"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    },
    "/api/user-authentication": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User Authentication",
        "description": "\"User Authentication\" operation serves to validate user credentials, ensuring the security of the authentication process. Upon successful verification, the operation generates an access token. This token acts as a secure authentication mechanism for subsequent requests, facilitating authorized access to protected resources within the application or API",
        "operationId": "userAuthenticationUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User Authentication Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User Authentication Response After Successfull Authentication"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
          },
          "401": {
            "description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
          },
          "412": {
            "description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
          },
          "415": {
            "description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
          },
          "500": {
            "description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccMoneyReceiptVm": {
        "title": "AccMoneyReceiptVm",
        "required": [
          "vatAmount",
          "vatRate"
        ],
        "type": "object",
        "properties": {
          "currencyRate": {
            "type": "number",
            "description": "Refers to the exchange rate between two currencies if the currencyType is not BDT. It will always converted to BDT from other currency.",
            "format": "double"
          },
          "currencyType": {
            "type": "string",
            "description": "Refers to the specific currency denomination used in financial transaction.",
            "example": "USE, BDT, EURO etc."
          },
          "documentNumber": {
            "type": "string",
            "description": "Document/Documents number that/those are associated with the money receipt number."
          },
          "middlewareRequest": {
            "type": "boolean"
          },
          "mrAmount": {
            "type": "number",
            "description": "the total sum of money received or collected for a particular transaction or financial activity. (net-premium + vat + stamp + charges) etc.",
            "format": "double"
          },
          "mrDate": {
            "type": "string",
            "description": "Money Receipt Creation/Final Submission Date",
            "format": "date"
          },
          "mrNumber": {
            "type": "string",
            "description": "Unique system generated number to identify money receipt"
          },
          "mrStatus": {
            "pattern": "\\bDRAFT|FINAL\\b",
            "type": "string",
            "description": "Money Receipt status or the currenct situation of the money receipt"
          },
          "netPremium": {
            "type": "number",
            "description": "Refers to the total amount of premium charged by an insurance company to provide coverage for a specific insurance policy, excluding any taxes, fees, or commissions",
            "format": "double"
          },
          "paymentType": {
            "pattern": "\\bFULL|PARTIAL|INSTALLMENT|LEADER_PORTION_ONLY\\b",
            "type": "string",
            "description": "Amount payment type (pre-configured system value)",
            "example": "FULL, PARTIAL, INSTALLMENT etc."
          },
          "stampAmount": {
            "type": "number",
            "description": "Stamp amount of the doucment calculated using stamp rate",
            "format": "double"
          },
          "sumInsured": {
            "type": "number",
            "description": "The maximum amount of coverage provided by an insurance policy for a specific risk or asset.",
            "format": "double"
          },
          "vatAmount": {
            "type": "number",
            "format": "double"
          },
          "vatRate": {
            "type": "number",
            "format": "double"
          },
          "vatType": {
            "type": "string"
          }
        }
      },
      "Add Document Request": {
        "title": "Add Document Request",
        "required": [
          "customerInfo",
          "loginUserInfo",
          "messageId"
        ],
        "type": "object",
        "properties": {
          "bnh": {
            "description": "Business & Holidays (B&H) related details",
            "$ref": "#/components/schemas/Business and Holidays Details"
          },
          "commonInfo": {
            "description": "Common Payment Information for MR",
            "$ref": "#/components/schemas/Document Common Information For Payment"
          },
          "customerInfo": {
            "description": "Customer Information",
            "$ref": "#/components/schemas/Customer Information For Document"
          },
          "ens": {
            "description": "Employment and Studies (E&S) related details",
            "$ref": "#/components/schemas/Employment and Studies Details"
          },
          "forDataSave": {
            "type": "object",
            "description": "Exact quotation response (get-quotation api response 'forDataSave' portion) must be send in this object"
          },
          "ghi": {
            "description": "Ghoup Health Insurance related details",
            "$ref": "#/components/schemas/Nibedita Details"
          },
          "insuredAddress": {
            "type": "string",
            "description": "InsuredAddress / DeliveryAddress of the customer"
          },
          "loginUserInfo": {
            "description": "Logged in User Information",
            "$ref": "#/components/schemas/Logged in User Infomation"
          },
          "messageId": {
            "type": "string",
            "description": "This API requires a unique message id to trace the requests and also checking for duplicate request. messageId is mandatory, unique and can not be null."
          },
          "mtr": {
            "description": "Motor product related details",
            "$ref": "#/components/schemas/Motor Details"
          },
          "nib": {
            "description": "Nibedita product related details",
            "$ref": "#/components/schemas/Nibedita Details"
          },
          "ppa": {
            "description": "People's Personal Accident (PPA) product related details",
            "$ref": "#/components/schemas/People's Personal Accident Details"
          }
        }
      },
      "Agent Request Model": {
        "title": "Agent Request Model",
        "type": "object",
        "properties": {
          "agencyCode": {
            "type": "string",
            "description": "Agency code of the agent",
            "example": "agent123"
          }
        }
      },
      "Agent response": {
        "title": "Agent response",
        "type": "object",
        "properties": {
          "agencyCode": {
            "type": "string",
            "description": "Agency code of the agent",
            "example": "AG12345"
          },
          "dateOfExpiry": {
            "type": "string",
            "description": "Date of expiry of the agent's license",
            "example": "2024-12-31"
          },
          "dateOfIssue": {
            "type": "string",
            "description": "Date of issue of the agent's license",
            "example": "2020-01-01"
          },
          "email": {
            "type": "string",
            "description": "Email address of the agent",
            "example": "john.doe@example.com"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the agent",
            "example": "Male"
          },
          "idraCode": {
            "type": "string",
            "description": "IDRA code of the agent",
            "example": "IDRA7890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the agent is currently active",
            "example": true
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile number of the agent",
            "example": "+8801612345678"
          },
          "name": {
            "type": "string",
            "description": "Name of the agent",
            "example": "John Doe"
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the agent",
            "example": "456 Elm St, Townsville"
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the agent",
            "example": "123 Main St, Cityville"
          },
          "status": {
            "type": "string",
            "description": "Status of the agent",
            "example": "Active"
          },
          "uniqueAgentCode": {
            "type": "string",
            "description": "Unique code assigned to the agent",
            "example": "UAG987654"
          }
        }
      },
      "Agent response with related documents": {
        "title": "Agent response with related documents",
        "type": "object",
        "properties": {
          "agencyCode": {
            "type": "string",
            "description": "Agency code of the agent",
            "example": "AG12345"
          },
          "dateOfExpiry": {
            "type": "string",
            "description": "Date of expiry of the agent's license",
            "example": "2024-12-31"
          },
          "dateOfIssue": {
            "type": "string",
            "description": "Date of issue of the agent's license",
            "example": "2020-01-01"
          },
          "documents": {
            "type": "array",
            "description": "All document list for the agent",
            "items": {
              "$ref": "#/components/schemas/Document Number with Validity"
            }
          },
          "email": {
            "type": "string",
            "description": "Email address of the agent",
            "example": "john.doe@example.com"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the agent",
            "example": "Male"
          },
          "idraCode": {
            "type": "string",
            "description": "IDRA code of the agent",
            "example": "IDRA7890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the agent is currently active",
            "example": true
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile number of the agent",
            "example": "+8801612345678"
          },
          "name": {
            "type": "string",
            "description": "Name of the agent",
            "example": "John Doe"
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the agent",
            "example": "456 Elm St, Townsville"
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the agent",
            "example": "123 Main St, Cityville"
          },
          "status": {
            "type": "string",
            "description": "Status of the agent",
            "example": "Active"
          },
          "uniqueAgentCode": {
            "type": "string",
            "description": "Unique code assigned to the agent",
            "example": "UAG987654"
          }
        }
      },
      "Aggregator Products List": {
        "title": "Aggregator Products List",
        "type": "object",
        "properties": {
          "ageLimitInfo": {
            "type": "string",
            "description": "Age limit of the customer/client who are eligiable for this proudct",
            "example": "16 years to 65 years"
          },
          "coverage": {
            "type": "string",
            "description": "Coverages of the product",
            "example": "List of coverages"
          },
          "description": {
            "type": "string",
            "description": "Description of the prouduct",
            "example": "Some long text description of the prouduct"
          },
          "exclusion": {
            "type": "string",
            "description": "Product Execlution List",
            "example": "List of exclusions"
          },
          "hasSubProduct": {
            "type": "boolean",
            "description": "This product has sub-product or not?",
            "example": false
          },
          "id": {
            "type": "integer",
            "description": "id of the product",
            "format": "int64",
            "example": 1
          },
          "keyFeature": {
            "type": "string",
            "description": "Key feature of the product",
            "example": "List of key features"
          },
          "productCode": {
            "type": "string",
            "description": "product code",
            "example": "NIB, ENS, MTR etc"
          },
          "productDetails": {
            "type": "array",
            "description": "If the product has sub-products then this will be in use otherwise this will be null/empty",
            "example": "For NIB -\u003E NIBEDITA-ECO, NIBEDITA-PLUS etc",
            "items": {
              "$ref": "#/components/schemas/Sub Product Details Reponse"
            }
          },
          "productInfo": {
            "type": "string",
            "description": "Product Information",
            "example": "NIBEDITA, BNH, ENS etc"
          },
          "productName": {
            "type": "string",
            "description": "Name of the Product",
            "example": "Nibedita, Motor etc"
          },
          "sumInsuredInfo": {
            "type": "string",
            "description": "Range of sum-insured amount",
            "example": "BDT 50000 to BDT 2000000"
          },
          "title": {
            "type": "string",
            "description": "Title of the product",
            "example": "Full length title of the proudct"
          }
        }
      },
      "AggregatorClientBranchResponseVm": {
        "title": "AggregatorClientBranchResponseVm",
        "type": "object",
        "properties": {
          "clientBranchList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregatorClientBranchResponseVm"
            }
          },
          "clientCode": {
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "refId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AgriBanAndPreInfo": {
        "title": "AgriBanAndPreInfo",
        "type": "object",
        "properties": {
          "bankAccountNo": {
            "type": "string"
          },
          "bankBranchName": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "loanEndDate": {
            "type": "string"
          },
          "loanStartDate": {
            "type": "string"
          },
          "noOfLivestock": {
            "type": "integer",
            "format": "int32"
          },
          "sumInsured": {
            "type": "number",
            "format": "float"
          },
          "totalGrossPremium": {
            "type": "number",
            "format": "float"
          },
          "totalLoanAmount": {
            "type": "number",
            "format": "float"
          },
          "totalNetPremium": {
            "type": "number",
            "format": "float"
          },
          "totalVat": {
            "type": "number",
            "format": "float"
          },
          "typeOfLivestock": {
            "type": "string"
          }
        }
      },
      "AgriCustomerInfo": {
        "title": "AgriCustomerInfo",
        "type": "object",
        "properties": {
          "beneficialoPolicy": {
            "type": "string"
          },
          "bin": {
            "type": "string"
          },
          "birthRegistrationNo": {
            "type": "string"
          },
          "branchCode": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "companyType": {
            "type": "string"
          },
          "contactPerson": {
            "type": "string"
          },
          "contractAddress": {
            "type": "string"
          },
          "customerID": {
            "type": "string"
          },
          "customerType": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "docDate": {
            "type": "string"
          },
          "drivingExpairyDate": {
            "type": "string"
          },
          "drivingLinceseNo": {
            "type": "string"
          },
          "editDate": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "farmAddress": {
            "type": "string"
          },
          "fatherName": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "flag": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "groupCode": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "lockStatus": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "mobileNo": {
            "type": "string"
          },
          "mobileVender": {
            "type": "string"
          },
          "motherName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nationalID": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          },
          "occupation": {
            "type": "string"
          },
          "occupationAddress": {
            "type": "string"
          },
          "officeAddress": {
            "type": "string"
          },
          "officeName": {
            "type": "string"
          },
          "officeTelephone": {
            "type": "string"
          },
          "officialDesignation": {
            "type": "string"
          },
          "passportExpairyDate": {
            "type": "string"
          },
          "passportNo": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "permanentAddress": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "presentAddress": {
            "type": "string"
          },
          "previousDocID": {
            "type": "string"
          },
          "producer": {
            "type": "string"
          },
          "provenSourceOfIncome": {
            "type": "string"
          },
          "registrationAuthority": {
            "type": "string"
          },
          "registrationCopy": {
            "type": "string"
          },
          "registrationIssueDate": {
            "type": "string"
          },
          "registrationIssuePlace": {
            "type": "string"
          },
          "registrationNo": {
            "type": "string"
          },
          "residenceTelephone": {
            "type": "string"
          },
          "residentStatus": {
            "type": "string"
          },
          "servicingBranch": {
            "type": "string"
          },
          "sourceOfIncome": {
            "type": "string"
          },
          "spouseName": {
            "type": "string"
          },
          "tin": {
            "type": "string"
          },
          "tradeLicense": {
            "type": "string"
          },
          "tradeLicenseNo": {
            "type": "string"
          },
          "typeOfBusiness": {
            "type": "string"
          },
          "union": {
            "type": "string"
          },
          "upozilaOrThana": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "village": {
            "type": "string"
          },
          "zila": {
            "type": "string"
          }
        }
      },
      "AgriLivestockInfo": {
        "title": "AgriLivestockInfo",
        "type": "object",
        "properties": {
          "ageMonth": {
            "type": "string"
          },
          "ageYear": {
            "type": "string"
          },
          "cattleGender": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "farmCatagory": {
            "type": "string"
          },
          "fromDate": {
            "type": "string"
          },
          "grossPremium": {
            "type": "number",
            "format": "float"
          },
          "healthCardNo": {
            "type": "string"
          },
          "heightFeet": {
            "type": "string"
          },
          "heightInches": {
            "type": "string"
          },
          "loanAmount": {
            "type": "integer",
            "format": "int32"
          },
          "marketPrice": {
            "type": "integer",
            "format": "int32"
          },
          "netPremium": {
            "type": "number",
            "format": "float"
          },
          "purchasePrice": {
            "type": "integer",
            "format": "int32"
          },
          "tagID": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "vat": {
            "type": "number",
            "format": "float"
          },
          "weight": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "AgriMultiplePolicyData": {
        "title": "AgriMultiplePolicyData",
        "type": "object",
        "properties": {
          "docID": {
            "type": "string"
          },
          "livestock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CattleDescription"
            }
          },
          "policyEndDate": {
            "type": "string"
          },
          "policyID": {
            "type": "string"
          },
          "policyLockStatus": {
            "type": "boolean"
          },
          "policyStartDate": {
            "type": "string"
          }
        }
      },
      "AgriMultiplePolicyInfoResponse": {
        "title": "AgriMultiplePolicyInfoResponse",
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgriMultiplePolicyData"
            }
          }
        }
      },
      "AgriRequest": {
        "title": "AgriRequest",
        "type": "object",
        "properties": {
          "bankAndPremium": {
            "$ref": "#/components/schemas/AgriBanAndPreInfo"
          },
          "customer": {
            "$ref": "#/components/schemas/AgriCustomerInfo"
          },
          "dummyPolicyID": {
            "type": "string"
          },
          "livestock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgriLivestockInfo"
            }
          },
          "policyDuration": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Business And Holidays": {
        "title": "Business And Holidays",
        "type": "object",
        "properties": {
          "coveredLimit": {
            "type": "integer",
            "description": "Policy Covered limit",
            "format": "int32",
            "example": 125000
          },
          "dayStay": {
            "type": "integer",
            "description": "Number of days for stay",
            "format": "int32",
            "example": 160
          },
          "placeVisitCode": {
            "type": "string",
            "description": "Place visit code pre configured system value",
            "example": "C"
          },
          "policyDuration": {
            "type": "string",
            "description": "Policy duration (short or full)",
            "example": "short"
          }
        }
      },
      "Business and Holidays Details": {
        "title": "Business and Holidays Details",
        "type": "object",
        "properties": {
          "coveredLimit": {
            "type": "integer",
            "description": "Covered Limit (the height limit of the coverage)",
            "format": "int64"
          },
          "custGender": {
            "type": "string",
            "description": "Customer Gender",
            "example": "Male, Female etc"
          },
          "custOccupation": {
            "type": "string",
            "description": "Customer Occupation"
          },
          "custPasspostNo": {
            "type": "string",
            "description": "Customer Passport Number"
          },
          "destCountryAddress": {
            "type": "string",
            "description": "Destination Country Address"
          },
          "doctorId": {
            "type": "string",
            "description": "Doctor ID (some unique identification of the Doctor)"
          },
          "employerAddress": {
            "type": "string",
            "description": "Employer Valid Address"
          },
          "employerName": {
            "type": "string",
            "description": "Employer Full Name"
          },
          "insuredOccupation": {
            "type": "string",
            "description": "Insured (customer) Occupation"
          },
          "interestInsured": {
            "type": "string",
            "description": "Interest Insured"
          },
          "medicalNonMedical": {
            "type": "string",
            "description": "Medical or Non-Medical (Predefined System COnfiguration Value)"
          },
          "nameOfTheUsualPhysician": {
            "type": "string",
            "description": "Name of the Usual Physician"
          },
          "officeTelephoneNo": {
            "type": "string",
            "description": "Office Telephone Number"
          },
          "participant": {
            "type": "string",
            "description": "Participant Full Name"
          },
          "physicianTelephoneNoHome": {
            "type": "string",
            "description": "Physician Telephone Number (Home)"
          },
          "physicianTelephoneNoOffice": {
            "type": "string",
            "description": "Physician Telephone Number (Office)"
          },
          "planName": {
            "type": "string",
            "description": "Plan Name (Predefined System Configuration Value)"
          },
          "planType": {
            "type": "string",
            "description": "Plan Type (Predefined System Configuration Value)"
          },
          "reInsuredCountry": {
            "type": "string",
            "description": "Re-Insured Country"
          },
          "visaType": {
            "type": "string",
            "description": "Visa Type of the Customer/Client"
          }
        }
      },
      "Business and Holidays Dropdown details": {
        "title": "Business and Holidays Dropdown details",
        "type": "object",
        "properties": {
          "visitList": {
            "type": "array",
            "description": "Business and Holidays place visit code list array",
            "items": {
              "$ref": "#/components/schemas/Place Visit Model"
            }
          }
        }
      },
      "Business and Holidays Prerequisite For Data Save": {
        "title": "Business and Holidays Prerequisite For Data Save",
        "type": "object",
        "properties": {
          "textFields": {
            "type": "array",
            "description": "Prerequisite text fields to save the document policy.",
            "items": {
              "$ref": "#/components/schemas/Business and Holidays Related text fields"
            }
          }
        },
        "description": "Business and Holidays Prerequisite For Data Save"
      },
      "Business and Holidays Quotation Prerequisite Details": {
        "title": "Business and Holidays Quotation Prerequisite Details",
        "type": "object",
        "properties": {
          "dropdowns": {
            "description": "Dropdown values for Business and Holidays",
            "$ref": "#/components/schemas/Business and Holidays Dropdown details"
          },
          "textFields": {
            "type": "array",
            "description": "Common text fields array with type and description",
            "items": {
              "$ref": "#/components/schemas/Common text field description"
            }
          }
        }
      },
      "Business and Holidays Related text fields": {
        "title": "Business and Holidays Related text fields",
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "custOccupation, custPasspostNo, custGender, interestInsured, reInsuredCountry, doctorId, planName, coveredLimit, insuredOccupation, employerName, employerAddress, officeTelephoneNo, nameOfTheUsualPhysician, physicianTelephoneNoOffice, physicianTelephoneNoHome, destCountryAddress, participant, visaType, sponsorName, destCountryCollege, destCountryOccupation, studyCourse, nextKinName, nextKinAddress, nextKinTelNo, nextKinRelationship, physicianHomeTelNo, regionOfCountry"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          }
        },
        "description": "Business and Holidays Related text fields"
      },
      "CRMCustomerRequestVM": {
        "title": "CRMCustomerRequestVM",
        "required": [
          "searchFieldType",
          "searchText"
        ],
        "type": "object",
        "properties": {
          "searchFieldType": {
            "type": "array",
            "description": "Type of the search fields, can be mobile number, document number, or both",
            "example": "MOBILE_NUMBER, DOCUMENT_NUMBER",
            "items": {
              "type": "string",
              "enum": [
                "DOCUMENT_NUMBER",
                "MOBILE_NUMBER"
              ]
            }
          },
          "searchText": {
            "type": "string",
            "description": "Value corresponding to the selected searchFieldType",
            "example": "01711111111, GDI/AHO/08/2024/FIR/P/000001"
          }
        }
      },
      "CattleDescription": {
        "title": "CattleDescription",
        "type": "object",
        "properties": {
          "ageMonth": {
            "type": "string"
          },
          "ageYear": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "coveragePeriodMonthly": {
            "type": "integer",
            "format": "int32"
          },
          "docNo": {
            "type": "string"
          },
          "dummyPolicyID": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "farmCatagory": {
            "type": "string"
          },
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "grossPremium": {
            "type": "number",
            "format": "float"
          },
          "healthCardNo": {
            "type": "string"
          },
          "heightFeet": {
            "type": "string"
          },
          "heightInches": {
            "type": "string"
          },
          "loanAmount": {
            "type": "number",
            "format": "float"
          },
          "marketPrice": {
            "type": "number",
            "format": "float"
          },
          "netPremium": {
            "type": "number",
            "format": "float"
          },
          "premiumRate": {
            "type": "number",
            "format": "float"
          },
          "purchasePrice": {
            "type": "number",
            "format": "float"
          },
          "tagNo": {
            "type": "string"
          },
          "toDate": {
            "type": "string",
            "format": "date-time"
          },
          "vat": {
            "type": "number",
            "format": "float"
          },
          "weight": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Claims Request Model": {
        "title": "Claims Request Model",
        "type": "object",
        "properties": {
          "claimsLossId": {
            "type": "string",
            "description": "ClaimsLossId of the Claim",
            "example": "FCL/2024/000001"
          }
        }
      },
      "Claims response for any claims loss": {
        "title": "Claims response for any claims loss",
        "type": "object",
        "properties": {
          "claimedAmount": {
            "type": "number",
            "description": "Amount claimed by the insured",
            "format": "double",
            "example": 15000
          },
          "claimsClassCode": {
            "type": "string",
            "description": "Code representing the class of the claim",
            "example": "CLASS_A"
          },
          "dateOfIntimation": {
            "type": "string",
            "description": "Date when the loss was intimated",
            "example": "2024-01-15"
          },
          "dateOfLoss": {
            "type": "string",
            "description": "Date when the loss occurred",
            "example": "2024-01-10"
          },
          "dateOfPayment": {
            "type": "string",
            "description": "Date when the payment was made",
            "example": "2024-02-01"
          },
          "lossId": {
            "type": "string",
            "description": "Unique identifier for the loss",
            "example": "LOSS123456"
          },
          "lossYear": {
            "type": "integer",
            "description": "Year of the loss",
            "format": "int32",
            "example": 2024
          },
          "natureOfLoss": {
            "type": "string",
            "description": "Nature of the loss",
            "example": "Fire Damage"
          },
          "natureOfLossDescription": {
            "type": "string",
            "description": "Detailed description of the nature of loss",
            "example": "The fire caused significant damage to the warehouse."
          },
          "paidAmount": {
            "type": "number",
            "description": "Amount paid to the insured",
            "format": "double",
            "example": 12000
          }
        }
      },
      "ClaimsMergeResponse": {
        "title": "ClaimsMergeResponse",
        "type": "object",
        "properties": {
          "cessionno": {
            "type": "string"
          },
          "claimedAmount": {
            "type": "number",
            "format": "double"
          },
          "claimsClassCode": {
            "type": "string"
          },
          "coinsurerShare": {
            "type": "number",
            "format": "double"
          },
          "dateOfIntimation": {
            "type": "string",
            "format": "date"
          },
          "dateOfLoss": {
            "type": "string",
            "format": "date"
          },
          "docAdditional": {
            "type": "string"
          },
          "estimatedLoss": {
            "type": "number",
            "format": "double"
          },
          "gdicShare": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lossId": {
            "type": "string"
          },
          "lossNo": {
            "type": "string"
          },
          "lossNoNumber": {
            "type": "integer",
            "format": "int64"
          },
          "lossSubmitStatus": {
            "type": "string"
          },
          "lossYear": {
            "type": "string"
          },
          "masterDocId": {
            "type": "integer",
            "format": "int64"
          },
          "natureOfLoss": {
            "type": "string"
          },
          "natureOfLossId": {
            "type": "integer",
            "format": "int64"
          },
          "payableTo": {
            "type": "string"
          },
          "receivableFromCoinsurance": {
            "type": "number",
            "format": "double"
          },
          "remarks": {
            "type": "string"
          },
          "surveyorId": {
            "type": "integer",
            "format": "int64"
          },
          "surveyorName": {
            "type": "string"
          }
        }
      },
      "ClaimsResponseCRMIndividualVM": {
        "title": "ClaimsResponseCRMIndividualVM",
        "type": "object",
        "properties": {
          "claimedAmount": {
            "type": "number",
            "description": "Amount claimed by the insured",
            "format": "double",
            "example": 15000
          },
          "claimsClassCode": {
            "type": "string",
            "description": "Code representing the class of the claim",
            "example": "CLASS_A"
          },
          "dateOfIntimation": {
            "type": "string",
            "description": "Date when the loss was intimated",
            "example": "2024-01-15"
          },
          "dateOfLoss": {
            "type": "string",
            "description": "Date when the loss occurred",
            "example": "2024-01-10"
          },
          "dateOfPayment": {
            "type": "string",
            "description": "Date when the payment was made",
            "example": "2024-02-01"
          },
          "documents": {
            "type": "array",
            "description": "All tagged documents with the claim",
            "items": {
              "$ref": "#/components/schemas/Document Number with Validity"
            }
          },
          "lossId": {
            "type": "string",
            "description": "Unique identifier for the loss",
            "example": "LOSS123456"
          },
          "lossYear": {
            "type": "integer",
            "description": "Year of the loss",
            "format": "int32",
            "example": 2024
          },
          "natureOfLoss": {
            "type": "string",
            "description": "Nature of the loss",
            "example": "Fire Damage"
          },
          "natureOfLossDescription": {
            "type": "string",
            "description": "Detailed description of the nature of loss",
            "example": "The fire caused significant damage to the warehouse."
          },
          "paidAmount": {
            "type": "number",
            "description": "Amount paid to the insured",
            "format": "double",
            "example": 12000
          }
        }
      },
      "Common text field description": {
        "title": "Common text field description",
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          },
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "situation, occupation"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          }
        }
      },
      "Customer Information": {
        "title": "Customer Information",
        "required": [
          "customerType",
          "dateOfBirth",
          "mobileNo"
        ],
        "type": "object",
        "properties": {
          "bin": {
            "type": "string",
            "description": "BIN (Business Identification Number)",
            "example": "4265457564523"
          },
          "birthRegNo": {
            "type": "string",
            "description": "Birth registration number of the customer"
          },
          "companyRegAuthority": {
            "type": "string",
            "description": "Company registration authority"
          },
          "companyType": {
            "type": "string",
            "description": "Type of company",
            "example": "REGISTERED, UNREGISTERED"
          },
          "contactAddress": {
            "type": "string",
            "description": "Contact address of the customer"
          },
          "contactPerson": {
            "type": "string",
            "description": "The user designated by Customer who will serve as the primary contact person"
          },
          "customerGroupCode": {
            "type": "string",
            "description": "Customer group code"
          },
          "customerType": {
            "type": "string",
            "description": "Type of customer {when customer is PERSONAL NID, Passport or Birth Reg no is required, and when BUSINESS there are ceitain logical required fields like (Registerd=BIN) (Proprietorship/Sole Trader = BIN or NID) (Partnership Firm=BIN or NID) (Society=NID) (Trade Org=NID) (NGO/Charitable Org = BIN or NID) (Foreign Org=BIN or NID)}",
            "example": "BUSINESS, INDIVIDUAL"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the customer format: (YYYY-MM-DD) (required for both new customer and existing customer)",
            "example": "1990-01-01"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer"
          },
          "fatherName": {
            "type": "string",
            "description": "Father's name of the customer"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer",
            "example": "Male, Female etc."
          },
          "incomeSource": {
            "type": "string",
            "description": "Customer source of income"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the customer"
          },
          "mobileNo": {
            "type": "string",
            "description": "Customer Valid Mobile Number (required for both new customer and existing customer)"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the customer"
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of the customer"
          },
          "nid": {
            "type": "string",
            "description": "National ID number of the customer"
          },
          "officeAddress": {
            "type": "string",
            "description": "Office address of the customer"
          },
          "officeContactNumber": {
            "type": "string",
            "description": "Office contact number of the customer"
          },
          "passportExpireDate": {
            "type": "string",
            "description": "Passport expiration date format: (YYYY-MM-DD) (if passport number is given then expiry date must be given)",
            "example": "1990-01-01"
          },
          "passportNo": {
            "type": "string",
            "description": "Passport number of the customer if any"
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the customer"
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the customer"
          },
          "regIssueDate": {
            "type": "string",
            "description": "Registration issue date format: (YYYY-MM-DD)",
            "example": "1990-01-01"
          },
          "spouseName": {
            "type": "string",
            "description": "Spouse's name of the customer if any"
          },
          "tin": {
            "type": "string",
            "description": "Taxpayer Identification Number (TIN)",
            "example": "95751147656"
          },
          "tradeLicenceNo": {
            "type": "string",
            "description": "Trade license number of the customer if any"
          }
        }
      },
      "Customer Information For Document": {
        "title": "Customer Information For Document",
        "type": "object",
        "properties": {
          "bin": {
            "type": "string",
            "description": "BIN (Business Identification Number). Mandatory for business customers."
          },
          "birthRegNo": {
            "type": "string",
            "description": "Birth registration number (optional)."
          },
          "companyRegAuthority": {
            "type": "string",
            "description": "Company registration authority (optional)."
          },
          "companyType": {
            "type": "string",
            "description": "Type of company (e.g., REGISTERED). Required for business customers."
          },
          "contactAddress": {
            "type": "string",
            "description": "Contact address (optional)."
          },
          "contactPerson": {
            "type": "string",
            "description": "Contact person (optional)."
          },
          "customerGroupCode": {
            "type": "string",
            "description": "Customer group code (e.g., UNILIVER). Required for business customers."
          },
          "customerId": {
            "type": "integer",
            "description": "Customer ID. It will depend on whether it's a new customer or an existing one. customerId will given for existing customer otherwise it will be null",
            "format": "int64"
          },
          "customerType": {
            "type": "string",
            "description": "Type of customer (e.g., BUSINESS). Required for business customers."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the customer. Required for new PERSONAL customer."
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer. Optional for personal/business customers."
          },
          "fatherName": {
            "type": "string",
            "description": "Father's name. Optional for personal/business customers."
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer. Required for new PERSONAL customer. "
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer. Mandatory for personal customers. Required for new PERSONAL customer."
          },
          "incomeSource": {
            "type": "string",
            "description": "Source of income (optional)."
          },
          "insuredAddress": {
            "type": "string",
            "description": "Insured address. Mandatory for both existing and new customers. By default it can be customers permanent address. User can change the address as it will be consider as mailing address"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer (optional)."
          },
          "mobileNo": {
            "type": "string",
            "description": "Mobile number of the customer. Mandatory for both personal and business customers."
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name. Optional for personal/business customers."
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer. Required for new customer."
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of the customer (optional)."
          },
          "nid": {
            "type": "string",
            "description": "NID (National Identification Number) (optional)."
          },
          "officeAddress": {
            "type": "string",
            "description": "Office address (optional)."
          },
          "officeContactNumber": {
            "type": "string",
            "description": "Office contact number (optional)."
          },
          "passportExpireDate": {
            "type": "string",
            "description": "Passport expiration date (if applicable). Mandatory when passport number (passportNo) is given."
          },
          "passportNo": {
            "type": "string",
            "description": "Passport number (if available) of the customer."
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the customer. Required for both personal and business customers."
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the customer (optional)."
          },
          "regIssueDate": {
            "type": "string",
            "description": "Registration issue date (optional)."
          },
          "spouseName": {
            "type": "string",
            "description": "Spouse's name. Optional for personal/business customers."
          },
          "tin": {
            "type": "string",
            "description": "TIN (Taxpayer Identification Number) (optional)."
          },
          "tradeLicenceNo": {
            "type": "string",
            "description": "Trade license number (optional)."
          }
        }
      },
      "Customer Information For Quotation": {
        "title": "Customer Information For Quotation",
        "type": "object",
        "properties": {
          "bin": {
            "type": "string",
            "description": "BIN (Business Identification Number) of the customer",
            "example": "123456789"
          },
          "birthRegNo": {
            "type": "string",
            "description": "Birth registration number of the customer",
            "example": "B9876543"
          },
          "companyRegAuthority": {
            "type": "string",
            "description": "Company registration authority of the customer",
            "example": "Government"
          },
          "companyType": {
            "type": "string",
            "description": "Type of the company",
            "example": "Corporation, Limited etc."
          },
          "contactAddress": {
            "type": "string",
            "description": "Contact address for the customer",
            "example": "789 Third St, City, Country"
          },
          "contactPerson": {
            "type": "string",
            "description": "Contact person for the customer",
            "example": "John Doe"
          },
          "customerGroupCode": {
            "type": "string",
            "description": "Customer group code",
            "example": "CG123"
          },
          "customerType": {
            "pattern": "\\bBUSINESS|PERSONAL||\\b",
            "type": "string",
            "description": "Type of customer (BUSINESS or PERSONAL)",
            "example": "BUSINESS"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the customer format: (YYYY-MM-DD)",
            "format": "date",
            "example": "1990-01-01T00:00:00.000+00:00"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer",
            "example": "test@example.com"
          },
          "fatherName": {
            "type": "string",
            "description": "Father's name of the customer",
            "example": "John Smith"
          },
          "firstName": {
            "type": "string",
            "description": "First Name Of The Customer",
            "example": "Abdur"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer",
            "example": "Male, Female etc."
          },
          "id": {
            "type": "integer",
            "description": "Auto increment id",
            "format": "int64",
            "example": 123456
          },
          "incomeSource": {
            "type": "string",
            "description": "Source of customer's income",
            "example": "Employment, Business etc."
          },
          "lastName": {
            "type": "string",
            "description": "Last Name Of The Customer",
            "example": "Sujon"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name Of The Customer",
            "example": "Rahman"
          },
          "mobileNo": {
            "type": "string",
            "description": "Mobile number of the customer",
            "example": "1234567890"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the customer",
            "example": "Mary Smith"
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer",
            "example": "Abdur Rahman Sujon"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of the customer",
            "example": "Bangladeshi, US, Canada etc."
          },
          "nid": {
            "type": "string",
            "description": "National ID number of the customer",
            "example": "1234567890"
          },
          "officeAddress": {
            "type": "string",
            "description": "Office address of the customer",
            "example": "101 Business Ave, City, Country"
          },
          "officeContactNumber": {
            "type": "string",
            "description": "Office contact number of the customer",
            "example": "+1234567890"
          },
          "passportExpireDate": {
            "type": "string",
            "description": "Passport expiry date of the customer",
            "example": "2025-01-01"
          },
          "passportNo": {
            "type": "string",
            "description": "Passport number of the customer",
            "example": "A1234567"
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the customer",
            "example": "456 Second St, City, Country"
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the customer",
            "example": "123 Main St, City, Country"
          },
          "regIssueDate": {
            "type": "string",
            "description": "Registration issue date",
            "example": "2022-01-15"
          },
          "spouseName": {
            "type": "string",
            "description": "Spouse's name of the customer",
            "example": "Jane Smith"
          },
          "tin": {
            "type": "string",
            "description": "TIN (Tax Identification Number) of the customer",
            "example": "987654321"
          },
          "tradeLicenceNo": {
            "type": "string",
            "description": "Trade license number of the customer",
            "example": "T987654321"
          }
        }
      },
      "Customer Response Body": {
        "title": "Customer Response Body",
        "type": "object",
        "properties": {
          "bin": {
            "type": "string",
            "description": "BIN (Business Identification Number) of the customer",
            "example": "123456789"
          },
          "birthRegNo": {
            "type": "string",
            "description": "Birth registration number of the customer",
            "example": "B9876543"
          },
          "companyRegAuthority": {
            "type": "string",
            "description": "Company registration authority of the customer",
            "example": "Government"
          },
          "companyType": {
            "type": "string",
            "description": "Type of the company",
            "example": "Corporation, Limited etc."
          },
          "contactAddress": {
            "type": "string",
            "description": "Contact address for the customer",
            "example": "789 Third St, City, Country"
          },
          "contactPerson": {
            "type": "string",
            "description": "Contact person for the customer",
            "example": "John Doe"
          },
          "customerGroupCode": {
            "type": "string",
            "description": "Customer group code",
            "example": "CG123"
          },
          "customerId": {
            "type": "integer",
            "description": "Customer sequential auto increment id",
            "format": "int64",
            "example": 1234
          },
          "customerType": {
            "type": "string",
            "description": "Type of the customer",
            "example": "Individual, Business etc."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the customer {format: (YYYY-MM-DD)}",
            "format": "date",
            "example": "1990-01-01T00:00:00.000+00:00"
          },
          "email": {
            "type": "string",
            "description": "Valid email address of the customer",
            "example": "test@example.com"
          },
          "exemptedExpiredDate": {
            "type": "string",
            "description": "Exampted Customer expiry date",
            "format": "date"
          },
          "fatherName": {
            "type": "string",
            "description": "Father's name of the customer",
            "example": "John Smith"
          },
          "firstName": {
            "type": "string",
            "description": "First Name Of The Customer",
            "example": "Abdur"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer",
            "example": "Male, Female etc."
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "incomeSource": {
            "type": "string",
            "description": "Customer's source of income",
            "example": "Employment, Business etc."
          },
          "isExemptedCustomer": {
            "type": "boolean",
            "description": "Customer is Vat Exampted or not",
            "example": false
          },
          "lastName": {
            "type": "string",
            "description": "Last Name Of The Customer",
            "example": "Sujon"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name Of The Customer",
            "example": "Rahman"
          },
          "mobileNo": {
            "type": "string",
            "description": "Mobile number of the customer",
            "example": "01234567890"
          },
          "mobileNos": {
            "type": "string",
            "description": "Mobile numbers of the customer (if Customer have multiple mobile numbers)",
            "example": "01234567890, 0124234324234, 02342342343"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the customer",
            "example": "Mary Smith"
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer",
            "example": "Abdur Rahman Sujon"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of the customer",
            "example": "Bangladeshi, US, Canada etc."
          },
          "nid": {
            "type": "string",
            "description": "National ID number (NID) of the customer",
            "example": "1234567890"
          },
          "officeAddress": {
            "type": "string",
            "description": "Office address of the customer",
            "example": "101 Business Ave, City, Country"
          },
          "officeContactNumber": {
            "type": "string",
            "description": "Office contact number of the customer",
            "example": "+1234567890"
          },
          "passportExpireDate": {
            "type": "string",
            "description": "Passport expiry date of the customer",
            "format": "date",
            "example": "2025-01-01T00:00:00.000+00:00"
          },
          "passportNo": {
            "type": "string",
            "description": "Passport number of the customer",
            "example": "A1234567"
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the customer",
            "example": "456 Second St, City, Country"
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the customer",
            "example": "123 Main St, City, Country"
          },
          "refCustomerId": {
            "type": "integer",
            "description": "Reference customer id",
            "format": "int64",
            "example": 12342343
          },
          "regIssueDate": {
            "type": "string",
            "description": "Registration issue date",
            "format": "date",
            "example": "2022-01-15T00:00:00.000+00:00"
          },
          "spouseName": {
            "type": "string",
            "description": "Spouse's name of the customer",
            "example": "Jane Smith"
          },
          "tin": {
            "type": "string",
            "description": "TIN (Tax Identification Number) of the customer",
            "example": "987654321"
          },
          "tradeLicenceNo": {
            "type": "string",
            "description": "Trade license number of the customer",
            "example": "T987654321"
          }
        }
      },
      "Customer Response Body For CRM": {
        "title": "Customer Response Body For CRM",
        "type": "object",
        "properties": {
          "bin": {
            "type": "string",
            "description": "BIN (Business Identification Number) of the customer",
            "example": "123456789"
          },
          "birthRegNo": {
            "type": "string",
            "description": "Birth registration number of the customer",
            "example": "B9876543"
          },
          "contactAddress": {
            "type": "string",
            "description": "Contact address for the customer",
            "example": "789 Third St, City, Country"
          },
          "contactPerson": {
            "type": "string",
            "description": "Contact person for the customer",
            "example": "John Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the customer {format: (YYYY-MM-DD)}",
            "format": "date",
            "example": "1990-01-01T00:00:00.000+00:00"
          },
          "documentNumbers": {
            "type": "array",
            "description": "Customer Purchased Policy Numbers",
            "items": {
              "$ref": "#/components/schemas/Document Number with Validity"
            }
          },
          "email": {
            "type": "string",
            "description": "Valid email address of the customer",
            "example": "test@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "First Name Of The Customer",
            "example": "Abdur"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer",
            "example": "Male, Female etc."
          },
          "incomeSource": {
            "type": "string",
            "description": "Customer's source of income",
            "example": "Employment, Business etc."
          },
          "lastName": {
            "type": "string",
            "description": "Last Name Of The Customer",
            "example": "Sujon"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name Of The Customer",
            "example": "Rahman"
          },
          "mobileNo": {
            "type": "string",
            "description": "Mobile number of the customer",
            "example": "01234567890"
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer",
            "example": "Abdur Rahman Sujon"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of the customer",
            "example": "Bangladeshi, US, Canada etc."
          },
          "nid": {
            "type": "string",
            "description": "National ID number (NID) of the customer",
            "example": "1234567890"
          },
          "permanentAddress": {
            "type": "string",
            "description": "Permanent address of the customer",
            "example": "456 Second St, City, Country"
          },
          "presentAddress": {
            "type": "string",
            "description": "Present address of the customer",
            "example": "123 Main St, City, Country"
          },
          "tin": {
            "type": "string",
            "description": "TIN (Tax Identification Number) of the customer",
            "example": "987654321"
          }
        }
      },
      "Data Object Single«AccMoneyReceiptVm»": {
        "title": "Data Object Single«AccMoneyReceiptVm»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AccMoneyReceiptVm"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«Agent response with related documents»": {
        "title": "Data Object Single«Agent response with related documents»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Agent response with related documents"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«ClaimsMergeResponse»": {
        "title": "Data Object Single«ClaimsMergeResponse»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimsMergeResponse"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«ClaimsResponseCRMIndividualVM»": {
        "title": "Data Object Single«ClaimsResponseCRMIndividualVM»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClaimsResponseCRMIndividualVM"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«Get Product List Response»": {
        "title": "Data Object Single«Get Product List Response»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Get Product List Response"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«Get Quotation Response»": {
        "title": "Data Object Single«Get Quotation Response»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Get Quotation Response"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«Quotation Prerequsite Response»": {
        "title": "Data Object Single«Quotation Prerequsite Response»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Quotation Prerequsite Response"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«Save Master Document Response»": {
        "title": "Data Object Single«Save Master Document Response»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Save Master Document Response"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«SearchMasterDocumentResponse»": {
        "title": "Data Object Single«SearchMasterDocumentResponse»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SearchMasterDocumentResponse"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«Underwriting Document Response for CRM»": {
        "title": "Data Object Single«Underwriting Document Response for CRM»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Underwriting Document Response for CRM"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object Single«UnderwritingResponseVm»": {
        "title": "Data Object Single«UnderwritingResponseVm»",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnderwritingResponseVm"
          },
          "remarks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object«Customer Response Body For CRM»": {
        "title": "Data Object«Customer Response Body For CRM»",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer Response Body For CRM"
            }
          },
          "remarks": {
            "type": "array",
            "description": "The success or error message will be send using this field.",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object«Customer Response Body»": {
        "title": "Data Object«Customer Response Body»",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer Response Body"
            }
          },
          "remarks": {
            "type": "array",
            "description": "The success or error message will be send using this field.",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object«Map«string,object»»": {
        "title": "Data Object«Map«string,object»»",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "remarks": {
            "type": "array",
            "description": "The success or error message will be send using this field.",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Object«Save Master Document Response»": {
        "title": "Data Object«Save Master Document Response»",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Save Master Document Response"
            }
          },
          "remarks": {
            "type": "array",
            "description": "The success or error message will be send using this field.",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicates whether the request execution status, true is success, false is failed.",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          }
        }
      },
      "Data Save Prerequisite": {
        "title": "Data Save Prerequisite",
        "type": "object",
        "properties": {
          "bnh": {
            "description": "BNH (Business & Holidays) details",
            "$ref": "#/components/schemas/Business and Holidays Prerequisite For Data Save"
          },
          "ens": {
            "description": "ENS (Employee & Study) details",
            "$ref": "#/components/schemas/Employment and Studies Prerequisite For DataSave"
          },
          "mtr": {
            "description": "MTR (Motor) details",
            "$ref": "#/components/schemas/Motor Prerequisite For Data Save"
          },
          "nib": {
            "description": "NIB (Nibedita) products",
            "$ref": "#/components/schemas/Nibedita Prerequisite For Data Save"
          },
          "pac": {
            "description": "PAC (Personal Accedent) details",
            "$ref": "#/components/schemas/Personal Accident Prerequisite for Data Save"
          },
          "ppa": {
            "description": "PPA (People's personal accedent) details",
            "$ref": "#/components/schemas/Prerequisite for Data Save"
          }
        },
        "description": "These are some of 'Data Save Prerequisite' for (add-master-document) api calling where different type of prequsite are needed."
      },
      "DocNoVm": {
        "title": "DocNoVm",
        "type": "object",
        "properties": {
          "docNo": {
            "type": "string",
            "description": "Document Number that you want to search",
            "example": "GDI/AHO/01/2024/NIB/P/570001"
          }
        }
      },
      "Document Common Information For Payment": {
        "title": "Document Common Information For Payment",
        "required": [
          "paymentBankName",
          "paymentBranchName",
          "paymentDate",
          "paymentMode",
          "paymentNumber",
          "paymentRoutingNumber",
          "trxNumber"
        ],
        "type": "object",
        "properties": {
          "paymentBankName": {
            "type": "string",
            "description": "Payment Bank Name"
          },
          "paymentBranchName": {
            "type": "string",
            "description": "Payment Branch Name"
          },
          "paymentDate": {
            "type": "string",
            "description": "Transaction Payment Date",
            "format": "date"
          },
          "paymentMode": {
            "type": "string",
            "description": "Mode of the payment by which the transaction made"
          },
          "paymentNumber": {
            "type": "string",
            "description": "Transaction Payment Number"
          },
          "paymentRoutingNumber": {
            "type": "string",
            "description": "Payment Routing Number"
          },
          "trxNumber": {
            "type": "string",
            "description": "Transaction Number"
          }
        }
      },
      "Document Number with Validity": {
        "title": "Document Number with Validity",
        "type": "object",
        "properties": {
          "documentNumber": {
            "type": "string",
            "description": "Customer Purchased Document Number",
            "example": "GDI/AHO/08/2024/FIR/P/000001"
          },
          "documentValidFrom": {
            "type": "string",
            "description": "Document validity start date",
            "format": "date"
          },
          "documentValidTo": {
            "type": "string",
            "description": "Document validity end date",
            "format": "date"
          }
        }
      },
      "Employment And Studies": {
        "title": "Employment And Studies",
        "type": "object",
        "properties": {
          "conversionRateUsdToBdt": {
            "type": "number",
            "description": "Conversion rate from USD to BDT",
            "format": "double",
            "example": 90
          },
          "coveredLimit": {
            "type": "integer",
            "description": "Policy Covered limit, When ensType=Employment, Default: 0, When applicable value will be 125000",
            "format": "int64",
            "example": 125000
          },
          "dayStay": {
            "type": "integer",
            "description": "Number of days for stay",
            "format": "int32",
            "example": 0
          },
          "ensType": {
            "pattern": "\\bEmployment|Study\\b",
            "type": "string",
            "description": "ENS type",
            "example": "Employment"
          },
          "monthStay": {
            "type": "integer",
            "description": "Number of months for stay",
            "format": "int32",
            "example": 8
          },
          "numberOfChild": {
            "type": "integer",
            "description": "Number of children, When ensType=Employment, Default: 0",
            "format": "int32",
            "example": 0
          },
          "numberOfPerson": {
            "type": "integer",
            "description": "Number of persons, When ensType=Employment, Default: 1",
            "format": "int32",
            "example": 1
          },
          "placeVisitCode": {
            "type": "string",
            "description": "Place visit code (pre configured system value)",
            "example": "B"
          }
        }
      },
      "Employment and Studies Details": {
        "title": "Employment and Studies Details",
        "type": "object",
        "properties": {
          "coveredLimit": {
            "type": "integer",
            "description": "Covered Limit (Specific Value that will be covered under this policy)",
            "format": "int64"
          },
          "custGender": {
            "type": "string",
            "description": "Customer Gender"
          },
          "custOccupation": {
            "type": "string",
            "description": "Customer Occupation"
          },
          "custPasspostNo": {
            "type": "string",
            "description": "Customer Passport Number"
          },
          "destCountryAddress": {
            "type": "string",
            "description": "Destination Country Address"
          },
          "doctorId": {
            "type": "string",
            "description": "Doctor ID (some unique identification of the Doctor)"
          },
          "employerAddress": {
            "type": "string",
            "description": "Employer Valid Address"
          },
          "employerName": {
            "type": "string",
            "description": "Employer Full Name"
          },
          "insuredOccupation": {
            "type": "string",
            "description": "Insured (Customer) Occupation"
          },
          "interestInsured": {
            "type": "string",
            "description": "Interest Insured"
          },
          "medicalNonMedical": {
            "type": "string",
            "description": "Medical or Non-Medical (Predefined System Configuration Value)"
          },
          "nameOfTheUsualPhysician": {
            "type": "string",
            "description": "Name of the Usual Physician"
          },
          "officeTelephoneNo": {
            "type": "string",
            "description": "Office Telephone Number"
          },
          "participant": {
            "type": "string",
            "description": "Participant Name"
          },
          "physicianTelephoneNoHome": {
            "type": "string",
            "description": "Physician Telephone Number (Home)"
          },
          "physicianTelephoneNoOffice": {
            "type": "string",
            "description": "Physician Telephone Number (Office)"
          },
          "planName": {
            "type": "string",
            "description": "Plan Name (Predefined System Configuration Value)"
          },
          "planType": {
            "type": "string",
            "description": "Plan Type (Predefined System Configuration Value)"
          },
          "reInsuredCountry": {
            "type": "string",
            "description": "Re-Insured Country"
          },
          "visaType": {
            "type": "string",
            "description": "Visa Type of the Customer/Client"
          }
        }
      },
      "Employment and Studies Prerequisite For DataSave": {
        "title": "Employment and Studies Prerequisite For DataSave",
        "type": "object",
        "properties": {
          "textFields": {
            "type": "array",
            "description": "Prerequisite text fields to save the document policy.",
            "items": {
              "$ref": "#/components/schemas/Employment and Studies Related text fields"
            }
          }
        },
        "description": "Employment and Studies Prerequisite For DataSave"
      },
      "Employment and Studies Quotation Prerequisite Details": {
        "title": "Employment and Studies Quotation Prerequisite Details",
        "type": "object",
        "properties": {
          "dropdowns": {
            "description": "Dropdown values for Employment and Studies",
            "$ref": "#/components/schemas/EnsDropdownDetails"
          },
          "textFields": {
            "type": "array",
            "description": "Common text fields array with type and description",
            "items": {
              "$ref": "#/components/schemas/Common text field description"
            }
          }
        }
      },
      "Employment and Studies Related text fields": {
        "title": "Employment and Studies Related text fields",
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "custOccupation, custPasspostNo, custGender, interestInsured, reInsuredCountry, doctorId, planName, coveredLimit, insuredOccupation, employerName, employerAddress, officeTelephoneNo, nameOfTheUsualPhysician, physicianTelephoneNoOffice, physicianTelephoneNoHome, destCountryAddress, participant, visaType, sponsorName, destCountryCollege, destCountryOccupation, studyCourse, nextKinName, nextKinAddress, nextKinTelNo, nextKinRelationship, physicianHomeTelNo, regionOfCountry"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          }
        },
        "description": "Employment and Studies Related text fields"
      },
      "EnsDropdownDetails": {
        "title": "EnsDropdownDetails",
        "type": "object",
        "properties": {
          "ensTypeList": {
            "type": "array",
            "description": "Type of the policy, Study or Employment",
            "items": {
              "$ref": "#/components/schemas/NameValueVm"
            }
          },
          "visitList": {
            "type": "array",
            "description": "Place Visit List",
            "items": {
              "$ref": "#/components/schemas/Place Visit Model"
            }
          }
        }
      },
      "FireMasterDocVm": {
        "title": "FireMasterDocVm",
        "type": "object",
        "properties": {
          "approvalStatus": {
            "type": "string"
          },
          "classCode": {
            "type": "string",
            "description": "Class code is pre defined 3 characters system value refers to a specific class of a department.",
            "example": "MTR, IAR, FIR etc."
          },
          "currencyRate": {
            "type": "number",
            "description": "Refers to the conversion amount to BDT",
            "format": "double"
          },
          "currencyType": {
            "type": "string",
            "description": "Amount colleted by which currency."
          },
          "customerName": {
            "type": "string"
          },
          "discountAmount": {
            "type": "number",
            "description": "Amount of the discount",
            "format": "double"
          },
          "discountRate": {
            "type": "number",
            "description": "Rate of the privided discount.",
            "format": "double"
          },
          "discountType": {
            "type": "string",
            "description": "If the insurer provides any discuntns then there will be discount type base on the sutiation",
            "example": "Fixed, Percent etc."
          },
          "documentDate": {
            "type": "string",
            "description": "Document creation date",
            "format": "date"
          },
          "documentNumber": {
            "type": "string",
            "description": "System generated unique document number"
          },
          "documentValidFrom": {
            "type": "string",
            "description": "Document validity start date",
            "format": "date"
          },
          "documentValidTo": {
            "type": "string",
            "description": "Document validity end date",
            "format": "date"
          },
          "grossPremium": {
            "type": "number",
            "description": "The total/gross permium of the document like (net-premium + vat + stamp etc)",
            "format": "double"
          },
          "insuredAddress": {
            "type": "string",
            "description": "Customer valid address 'present/permanent'"
          },
          "mrCreationAllowed": {
            "type": "boolean"
          },
          "netPremium": {
            "type": "number",
            "description": "Refers to the amount of money an insurance company collects from policyholders for providing insurance coverage, excluding any taxes, fees, commissions, or other expenses associated with the insurance policy.",
            "format": "double"
          },
          "othersCharge": {
            "type": "number",
            "description": "If the document have any other changes",
            "format": "double"
          },
          "serviceCharge": {
            "type": "number",
            "description": "service charge is a fee charged by a service provider for the services rendered to a customer or clien.",
            "format": "double"
          },
          "stampAmount": {
            "type": "number",
            "description": "Stamp amount of the doucment calculated using stamp rate",
            "format": "double"
          },
          "stampDutyType": {
            "type": "string",
            "description": "Type of stamp duity",
            "example": "Recoverable, Non-Recoverable etc."
          },
          "stampRate": {
            "type": "number",
            "description": "Stamp rate of the document",
            "format": "double"
          },
          "stampType": {
            "type": "string",
            "description": "What type of stamp",
            "example": "Fixed, percent etc."
          },
          "sumInsured": {
            "type": "number",
            "description": "Refers to the maximum amount of coverage provided by an insurance policy for a specific risk or peril.",
            "format": "double"
          },
          "vatAmount": {
            "type": "number",
            "description": "Vat amount based on the vat type",
            "format": "double"
          },
          "vatType": {
            "type": "string",
            "description": "Types of VAT like if Exampted then no vat will be applicable",
            "example": "VAT, Exampted etc."
          }
        }
      },
      "Get Product List Response": {
        "title": "Get Product List Response",
        "type": "object",
        "properties": {
          "getQuotationPrerequisite": {
            "description": "Quotation pre requsite reponse",
            "$ref": "#/components/schemas/Quotation Prerequsite Response"
          },
          "productList": {
            "type": "array",
            "description": "List of Product Available for the Aggregetor",
            "items": {
              "$ref": "#/components/schemas/Aggregator Products List"
            }
          }
        }
      },
      "Get Quotation Request Body": {
        "title": "Get Quotation Request Body",
        "type": "object",
        "properties": {
          "customerInfo": {
            "$ref": "#/components/schemas/Customer Information For Quotation"
          },
          "policyEndDate": {
            "type": "string",
            "description": "Validity end date of the document",
            "format": "date",
            "example": "2024-08-08T00:00:00.000+00:00"
          },
          "policyStartDate": {
            "type": "string",
            "description": "Validity start date of the document",
            "format": "date",
            "example": "2023-08-09T00:00:00.000+00:00"
          },
          "productCode": {
            "pattern": "\\bNIBEDITA_ECO|NIBEDITA_REGULAR|NIBEDITA_PLUS|NIBEDITA_ORBIT|PAC|PPA|MTR|BNH|ENS|GREEN_DELTA_PROTISRUTI|SHUROKKHA_ALLROUNDER|SHUROKKHA_365\\b",
            "type": "string",
            "description": "Product code system defined configuration data sent through get quotation prerequsite",
            "example": "NIB, MTR, ENS etc."
          },
          "productSpecificInfo": {
            "description": "Specific product information like Nibedita info, Motor Info etc.",
            "$ref": "#/components/schemas/Product Specific Information"
          },
          "sumInsured": {
            "type": "integer",
            "description": "Sum insured amount (The sum insured amount refers to the maximum amount of money that the company agrees to pay out in the event of a covered loss or claim)",
            "format": "int32"
          }
        }
      },
      "Get Quotation Response": {
        "title": "Get Quotation Response",
        "type": "object",
        "properties": {
          "discountAmount": {
            "type": "number",
            "description": "Discount amount",
            "format": "double",
            "example": 0
          },
          "forDataSave": {
            "type": "object",
            "description": "Data for saving purposes"
          },
          "forDataSavePrerequisite": {
            "description": "Prerequisite fields for data savings both text fields and dropdown. Not related with quotation getting, but need when save the document.",
            "$ref": "#/components/schemas/Data Save Prerequisite"
          },
          "grossPremium": {
            "type": "number",
            "description": "Gross premium amount",
            "format": "double",
            "example": 10485
          },
          "netPremium": {
            "type": "number",
            "description": "Net premium amount",
            "format": "double",
            "example": 9100
          },
          "policyValidFrom": {
            "type": "string",
            "description": "Policy valid from date",
            "format": "date",
            "example": "2023-10-24T00:00:00.000+00:00"
          },
          "policyValidTo": {
            "type": "string",
            "description": "Policy valid to date",
            "format": "date",
            "example": "2024-10-23T00:00:00.000+00:00"
          },
          "stampAmount": {
            "type": "number",
            "description": "Stamp amount",
            "format": "double",
            "example": 20
          },
          "vatAmount": {
            "type": "number",
            "description": "VAT amount",
            "format": "double",
            "example": 1365
          }
        },
        "description": "Get Quotation Response"
      },
      "Logged in User Infomation": {
        "title": "Logged in User Infomation",
        "required": [
          "employeeId",
          "name",
          "role"
        ],
        "type": "object",
        "properties": {
          "branchCode": {
            "type": "string",
            "description": "Branch Code (Predefined 3 digits system value)",
            "example": "RSG, GLN, MKH etc"
          },
          "clientBranchId": {
            "type": "integer",
            "format": "int64"
          },
          "clientCode": {
            "type": "string",
            "description": "Client Code of the Organization (Aggregator)",
            "example": "BRAC, MTB, EBL etc"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "corporateAddress": {
            "type": "string",
            "description": "If Corporate Client policy then corporate address.",
            "example": "Road: 01, Block:A, Mohakhali, Dhaka"
          },
          "corporateDistrict": {
            "type": "string",
            "description": "If Corporate Client policy then corporate location district.",
            "example": "Dhaka, Munshiganj, Cumilla"
          },
          "corporateEmpDesignation": {
            "type": "string",
            "description": "If Corporate Client policy then corporate employee designation",
            "example": "Road: 01, Block:A, Mohakhali, Dhaka"
          },
          "corporateEmpId": {
            "type": "string",
            "description": "If Corporate Client policy then corporate Employee ID.",
            "example": "ID001, ID002"
          },
          "corporateEmpName": {
            "type": "string",
            "description": "If Corporate Client policy then corporate Employee Name.",
            "example": "Mr. Name 1, Mr. Name 2"
          },
          "corporateName": {
            "type": "string",
            "description": "If Corporate Client policy then corporate Name.",
            "example": "CompanyA, CompanyB"
          },
          "corporatePolicyStatus": {
            "type": "string",
            "description": "If Corporate Client policy then Value is YES else NO (Predefined YES/NO)",
            "example": "YES, NO"
          },
          "designation": {
            "type": "string",
            "description": "Designation of the logged in user",
            "example": "Software Engineer, Manager etc."
          },
          "employeeId": {
            "type": "string",
            "description": "Employee ID of the logged in user",
            "example": "EMP123, EMP455 etc."
          },
          "mobile": {
            "type": "string",
            "description": "Mobile Number of the logged in user"
          },
          "name": {
            "type": "string",
            "description": "Name of the Organization/User",
            "example": "BRAC Bank PLC, Mutual Trust Bank PLC etc."
          },
          "role": {
            "type": "string",
            "description": "Role of the logged in user",
            "example": "Manager, RM, Sales"
          }
        }
      },
      "MTR (Motor) Quotation Pre-Requsite Response": {
        "title": "MTR (Motor) Quotation Pre-Requsite Response",
        "type": "object",
        "properties": {
          "motorBrandNameList": {
            "type": "array",
            "description": "MTR Brand list",
            "items": {
              "$ref": "#/components/schemas/MTR Vehicle Brand Names"
            }
          },
          "motorCCNames": {
            "type": "array",
            "description": "Motor CC Names",
            "items": {
              "$ref": "#/components/schemas/MTR CC Names"
            }
          },
          "motorPlanTypes": {
            "type": "array",
            "description": "Motor Plan Types",
            "items": {
              "$ref": "#/components/schemas/MTR Plan Type"
            }
          },
          "mtrPerilExclusion": {
            "type": "array",
            "description": "MTR Peril Exculation",
            "items": {
              "$ref": "#/components/schemas/MTR Peril Exclusion"
            }
          },
          "mtrTermsOfUse": {
            "type": "array",
            "description": "MTR Terms of Use",
            "items": {
              "$ref": "#/components/schemas/MTR Terms Of Use"
            }
          },
          "mtrVehicleList": {
            "type": "array",
            "description": "Motor Vehicle List",
            "items": {
              "$ref": "#/components/schemas/MTR Vehicle Name"
            }
          },
          "vehicleTypes": {
            "type": "array",
            "description": "Motor Vehicle Types",
            "items": {
              "$ref": "#/components/schemas/MTR Vehicle Type"
            }
          }
        }
      },
      "MTR CC Names": {
        "title": "MTR CC Names",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Element"
          },
          "value": {
            "type": "string",
            "description": "Value value of the Element"
          }
        }
      },
      "MTR Peril Exclusion": {
        "title": "MTR Peril Exclusion",
        "type": "object",
        "properties": {
          "classCode": {
            "type": "string",
            "description": "Class Code (Predefined System 3 Characters Class Code)",
            "example": "MTR"
          },
          "deptCode": {
            "type": "string",
            "description": "Department code (Predefined System Dept Code)",
            "example": "MTR"
          },
          "id": {
            "type": "integer",
            "description": "Auto incremental id",
            "format": "int64"
          },
          "perilCode": {
            "type": "string",
            "description": "Peril Code (Predefined System Peril Code)",
            "example": "EQ (F & S), FLD & CYC etc."
          },
          "perilName": {
            "type": "string",
            "description": "Peril Name (Predefined System Peril Name)",
            "example": "Flood And Cyclone, Earthquake etc."
          }
        }
      },
      "MTR Plan Type": {
        "title": "MTR Plan Type",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Element"
          },
          "value": {
            "type": "string",
            "description": "Value value of the Element"
          }
        }
      },
      "MTR Terms Of Use": {
        "title": "MTR Terms Of Use",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto Incremental Id",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the Element"
          },
          "value": {
            "type": "string",
            "description": "Value value of the Element"
          }
        }
      },
      "MTR Vehicle Brand Names": {
        "title": "MTR Vehicle Brand Names",
        "type": "object",
        "properties": {
          "brandCode": {
            "type": "string",
            "description": "Vehicle Brand Code"
          },
          "brandName": {
            "type": "string",
            "description": "Vehicle Brand Name"
          },
          "id": {
            "type": "integer",
            "description": "Auto Incremental Id",
            "format": "int64"
          }
        }
      },
      "MTR Vehicle Name": {
        "title": "MTR Vehicle Name",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Vehicle"
          },
          "id": {
            "type": "integer",
            "description": "Identity value of vehicle",
            "format": "int64"
          },
          "vehicleName": {
            "type": "string",
            "description": "Descriptive name of the Vechile"
          }
        }
      },
      "MTR Vehicle Type": {
        "title": "MTR Vehicle Type",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Element"
          },
          "value": {
            "type": "string",
            "description": "Value value of the Element"
          }
        }
      },
      "Master Document Response For CRM": {
        "title": "Master Document Response For CRM",
        "type": "object",
        "properties": {
          "agents": {
            "type": "array",
            "description": "List of Agents of the associate document if present.",
            "items": {
              "$ref": "#/components/schemas/Agent response"
            }
          },
          "amendmend": {
            "type": "array",
            "description": "List of Endrossments of the associate document if present.",
            "items": {
              "$ref": "#/components/schemas/Master Document Response For CRM"
            }
          },
          "amendmentType": {
            "type": "string",
            "description": "When the document is type Endrossment/Addendum, this shows its change type.",
            "example": "FINANCIAL, NON_FINANCIAL"
          },
          "approvalStatus": {
            "type": "string",
            "description": "the document is approved or not by the authority"
          },
          "claims": {
            "type": "array",
            "description": "List of claims for the associate document",
            "items": {
              "$ref": "#/components/schemas/Claims response for any claims loss"
            }
          },
          "currencyType": {
            "type": "string",
            "description": "currency type of the document.",
            "example": "BDT, USD etc."
          },
          "customerName": {
            "type": "string",
            "description": "Customer name/Client name"
          },
          "documentDate": {
            "type": "string",
            "description": "Document final submission date",
            "format": "date"
          },
          "documentNumber": {
            "type": "string",
            "description": "Unique document indetification number.",
            "example": "GDI/AHO/01/2024/NIB/P/570001"
          },
          "documentStatus": {
            "type": "string",
            "description": "Document status refers to the current status of the document.",
            "example": "DRAFT, FINAL, APPROVE etc."
          },
          "documentType": {
            "type": "string",
            "description": "Document type (Pre-Defined 1 character code).",
            "example": "P -\u003E Policy, T -\u003E Cirtificate etc."
          },
          "documentValidFrom": {
            "type": "string",
            "description": "Document validity start date",
            "format": "date"
          },
          "documentValidTo": {
            "type": "string",
            "description": "Document validity end date",
            "format": "date"
          },
          "grossPremium": {
            "type": "number",
            "description": "The total/gross permium of the document like (net-premium + vat + stamp etc)",
            "format": "double"
          },
          "hasCoInsurance": {
            "type": "boolean",
            "description": "this document has any co-insurer or not",
            "example": false
          },
          "insuredAddress": {
            "type": "string",
            "description": "Customer valid address (Present / Permanent)"
          },
          "netPremium": {
            "type": "number",
            "description": "Refers to the amount of money an insurance company collects from policyholders for providing insurance coverage, excluding any taxes, fees, commissions, or other expenses associated with the insurance policy.",
            "format": "double"
          },
          "stampAmount": {
            "type": "number",
            "description": "Stamp amount of the doucment calculated using stamp rate",
            "format": "double"
          },
          "sumInsured": {
            "type": "number",
            "description": "the total asset value",
            "format": "double"
          },
          "vatAmount": {
            "type": "number",
            "description": "Vat amount based on the vat type",
            "format": "double"
          }
        }
      },
      "MasterDocResponseVm": {
        "title": "MasterDocResponseVm",
        "type": "object",
        "properties": {
          "approvedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "approvedBy": {
            "type": "integer",
            "format": "int64"
          },
          "approvedByName": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdBy": {
            "type": "integer",
            "format": "int64"
          },
          "createdByName": {
            "type": "string"
          },
          "customerName": {
            "type": "string",
            "description": "Customer name/Client name"
          },
          "documentDate": {
            "type": "string",
            "description": "Document final submission date",
            "format": "date"
          },
          "documentNumber": {
            "type": "string",
            "description": "Unique document indetification number.",
            "example": "GDI/AHO/01/2024/NIB/P/570001"
          },
          "documentStatus": {
            "type": "string",
            "description": "Document status refers to the current status of the document.",
            "example": "DRAFT, FINAL, APPROVE etc."
          },
          "documentType": {
            "type": "string",
            "description": "Document type (Pre-Defined 1 character code).",
            "example": "P -\u003E Policy, T -\u003E Cirtificate etc."
          },
          "documentValidFrom": {
            "type": "string",
            "description": "Document validity start date",
            "format": "date"
          },
          "documentValidTo": {
            "type": "string",
            "description": "Document validity end date",
            "format": "date"
          },
          "grossPremium": {
            "type": "number",
            "description": "The total/gross permium of the document like (net-premium + vat + stamp etc)",
            "format": "double"
          },
          "insuredAddress": {
            "type": "string",
            "description": "Customer valid address (Present / Permanent)"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedBy": {
            "type": "integer",
            "format": "int64"
          },
          "modifiedByName": {
            "type": "string"
          },
          "netPremium": {
            "type": "number",
            "description": "Refers to the amount of money an insurance company collects from policyholders for providing insurance coverage, excluding any taxes, fees, commissions, or other expenses associated with the insurance policy.",
            "format": "double"
          },
          "selected": {
            "type": "boolean"
          },
          "stampAmount": {
            "type": "number",
            "description": "Stamp amount of the doucment calculated using stamp rate",
            "format": "double"
          },
          "vatAmount": {
            "type": "number",
            "description": "Vat amount based on the vat type",
            "format": "double"
          }
        }
      },
      "MiddlewareSearchDocVm": {
        "title": "MiddlewareSearchDocVm",
        "type": "object",
        "properties": {
          "approvalStatus": {
            "pattern": "\\bDRAFT|FINAL|APPROVE||\\b",
            "type": "string",
            "description": "System defined code that refers the current status of the document.",
            "example": "APPROVE, DRAFT, FINAL etc."
          },
          "endDate": {
            "type": "string",
            "description": "Document date that referes the search will end from.",
            "format": "date"
          },
          "fromDate": {
            "type": "string",
            "description": "Document date that referes the search will begin from.",
            "format": "date"
          },
          "page": {
            "type": "integer",
            "description": "How many page you want to search liek 1 page or 10 pages.",
            "format": "int32"
          },
          "productCode": {
            "pattern": "\\bPAC|PPA|NIB|MTR|B&H|E&S||\\b",
            "type": "string",
            "description": "System Defind 3 digit product code.",
            "example": "PAC, PPA, NIB, MTR etc."
          },
          "searchText": {
            "type": "string",
            "description": "Search keywords like documentNumber.",
            "example": "GDI/AHO/01/2024/NIB/P/570001"
          },
          "size": {
            "type": "integer",
            "description": "The total number of search result you want.",
            "format": "int32"
          }
        }
      },
      "Motor Details": {
        "title": "Motor Details",
        "type": "object",
        "properties": {
          "brandCode": {
            "type": "string",
            "description": "Brand code of the vechile (predefined pre-requsite value from quotation).",
            "example": "Yeahama, Toyota etc."
          },
          "companyOrModelName": {
            "type": "string",
            "description": "Company or Model Name of the vehicle"
          },
          "fitnessExpiryDate": {
            "type": "string",
            "description": "Fitness Expiry Date of the vehicle"
          },
          "manufactureYear": {
            "type": "string",
            "description": "Manufacture Year of the vehicle"
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer name of the vehicle"
          },
          "motorEngineAndChassisNumber": {
            "type": "string",
            "description": "Motor Engine and Chassis Number"
          },
          "motorMakeAndBodyType": {
            "type": "string",
            "description": "Motor Make and Body Type of the vehicle"
          },
          "motorModelNumber": {
            "type": "string",
            "description": "Motor/Vehicle Model Number"
          },
          "motorRegistrationNumber": {
            "type": "string",
            "description": "Registration number of the vehicle"
          },
          "motorTermsOfUseId": {
            "type": "integer",
            "description": "Motor Terms of Use ID (System Defined ID)",
            "format": "int64"
          },
          "nameOfRegistrationAuthority": {
            "type": "string",
            "description": "Name of Registration Authority"
          },
          "nameOfTheVechile": {
            "type": "string",
            "description": "Name of the Vehicle"
          },
          "taxToken": {
            "type": "string",
            "description": "Tax Token of the vehicle"
          }
        }
      },
      "Motor Prerequisite For Data Save": {
        "title": "Motor Prerequisite For Data Save",
        "type": "object",
        "properties": {
          "textFields": {
            "type": "array",
            "description": "Prerequisite text fields to save the document policy.",
            "items": {
              "$ref": "#/components/schemas/Motor Related text fields"
            }
          }
        },
        "description": "Motor Prerequisite For Data Save"
      },
      "Motor Quotation Model": {
        "title": "Motor Quotation Model",
        "type": "object",
        "properties": {
          "avlsDiscount": {
            "type": "boolean",
            "description": "Whether AVLs discount is available",
            "example": true
          },
          "comprehensiveRate": {
            "type": "number",
            "description": "Comprehensive rate",
            "format": "double",
            "example": 0
          },
          "customerId": {
            "type": "integer",
            "description": "Customer ID",
            "format": "int32",
            "example": 70734
          },
          "exclusionPerilList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "fitnessExpiryDate": {
            "type": "string",
            "description": "Fitness expiry date",
            "example": "2023-07-19"
          },
          "loadingRate": {
            "type": "number",
            "description": "Loading rate",
            "format": "double",
            "example": 0
          },
          "lumpSumAmount": {
            "type": "integer",
            "description": "Lump sum amount",
            "format": "int64",
            "example": 0
          },
          "manufactureYear": {
            "type": "string",
            "description": "Manufacture year",
            "example": "2019"
          },
          "motorTermsOfUseId": {
            "type": "integer",
            "description": "Motor terms of use ID",
            "format": "int32",
            "example": 1
          },
          "mtrCcTon": {
            "type": "string",
            "description": "MTR CC ton type (CC or Ton)",
            "example": "CC"
          },
          "mtrCcTonValue": {
            "type": "number",
            "description": "MTR CC ton value (if vehicle is measured in CC then CC value or measured with TON then TON value)",
            "format": "double",
            "example": 200
          },
          "mtrConductorAmount": {
            "type": "number",
            "description": "Conductor amount",
            "format": "double",
            "example": 0
          },
          "mtrConductorRate": {
            "type": "number",
            "description": "Conductor rate",
            "format": "double",
            "example": 0
          },
          "mtrDriverTimesMultiply": {
            "type": "integer",
            "description": "Multiplier for driver count",
            "format": "int32",
            "example": 1
          },
          "mtrGuideAmount": {
            "type": "number",
            "description": "Guide amount",
            "format": "double",
            "example": 0
          },
          "mtrGuideRate": {
            "type": "number",
            "description": "Guide rate",
            "format": "double",
            "example": 0
          },
          "mtrHelperTimesMultiply": {
            "type": "integer",
            "description": "Multiplier for helper count",
            "format": "int32",
            "example": 1
          },
          "mtrNoOfConductor": {
            "type": "integer",
            "description": "Number of conductors",
            "format": "int32"
          },
          "mtrNoOfDriver": {
            "type": "integer",
            "description": "Number of drivers",
            "format": "int32"
          },
          "mtrNoOfGuide": {
            "type": "integer",
            "description": "Number of guides",
            "format": "int32"
          },
          "mtrNoOfHelper": {
            "type": "integer",
            "description": "Number of helpers",
            "format": "int32"
          },
          "mtrNoOfPassenger": {
            "type": "integer",
            "description": "Number of passengers",
            "format": "int32",
            "example": 1
          },
          "mtrPassengerTimesMultiply": {
            "type": "integer",
            "description": "Multiplier for passenger count",
            "format": "int32",
            "example": 1
          },
          "mtrPlanName": {
            "type": "string",
            "description": "MTR plan name",
            "example": "Comprehensive"
          },
          "mtrVehicleId": {
            "type": "integer",
            "description": "MTR vehicle ID",
            "format": "int64",
            "example": 1
          },
          "mtrVehicleType": {
            "type": "string",
            "description": "MTR vehicle type",
            "example": "Private"
          },
          "namedDriver": {
            "type": "boolean",
            "description": "Whether named driver is available",
            "example": false
          },
          "ncbRate": {
            "type": "number",
            "description": "No Claim Bonus rate",
            "format": "double",
            "example": 0
          },
          "oppositePurposeUseLoading": {
            "type": "boolean",
            "description": "Whether loading is applicable for opposite purpose use",
            "example": true
          },
          "policyDuration": {
            "type": "string",
            "description": "Policy duration (short or full)",
            "example": "full"
          },
          "stampAmount": {
            "type": "number",
            "description": "Stamp amount",
            "format": "double",
            "example": 500
          },
          "stampDutyType": {
            "type": "string",
            "description": "Stamp duty type (Recoverable or Non-Recoverable)",
            "example": "Non-Recoverable"
          },
          "sumInsured": {
            "type": "integer",
            "description": "Sum insured amount",
            "format": "int32",
            "example": 2000000
          },
          "taxFreeVehicle": {
            "type": "boolean",
            "description": "Whether the vehicle is tax-free",
            "example": true
          },
          "taxToken": {
            "type": "string",
            "description": "Tax token number",
            "example": "3425345"
          },
          "techometerVehicle": {
            "type": "boolean",
            "description": "Whether the vehicle has a tachometer",
            "example": true
          },
          "totalDays": {
            "type": "integer",
            "description": "Total days for policy",
            "format": "int32",
            "example": 365
          },
          "vatRate": {
            "type": "number",
            "description": "VAT rate",
            "format": "double",
            "example": 15
          },
          "vehicleRegistrationNumber": {
            "type": "string",
            "description": "Vehicle registration number",
            "example": "323425"
          }
        }
      },
      "Motor Quotation Prerequisite Details": {
        "title": "Motor Quotation Prerequisite Details",
        "type": "object",
        "properties": {
          "dropdowns": {
            "description": "Dropdown values for Motor",
            "$ref": "#/components/schemas/MTR (Motor) Quotation Pre-Requsite Response"
          },
          "textFields": {
            "type": "array",
            "description": "Common text fields array with type and description",
            "items": {
              "$ref": "#/components/schemas/Common text field description"
            }
          }
        }
      },
      "Motor Related text fields": {
        "title": "Motor Related text fields",
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "motorEngineAndChassisNumber, motorMakeAndBodyType, manufactureYear, motorModelNumber, taxToken, fitnessExpiryDate, manufacturer, companyOrModelName, motorTermsOfUseId"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          }
        },
        "description": "Motor Related text fields"
      },
      "NameValueVm": {
        "title": "NameValueVm",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Element"
          },
          "value": {
            "type": "string",
            "description": "Value value of the Element"
          }
        }
      },
      "Nibedita Details": {
        "title": "Nibedita Details",
        "type": "object",
        "properties": {
          "construction": {
            "type": "string",
            "description": "Customer Construction"
          },
          "nomineeDetails": {
            "type": "array",
            "description": "Nominee Details -\u003E send (empty / null) if nominee does not exists, for GHI nominee should be null.",
            "items": {
              "$ref": "#/components/schemas/NomineeDetails"
            }
          },
          "occupation": {
            "type": "string",
            "description": "Customer Occupation"
          }
        }
      },
      "Nibedita Dropdown Details": {
        "title": "Nibedita Dropdown Details",
        "type": "object",
        "properties": {
          "productList": {
            "type": "array",
            "description": "Product list for Nibedita/GHI",
            "items": {
              "$ref": "#/components/schemas/Nibedita Product Sum-Insured Details"
            }
          }
        }
      },
      "Nibedita Prerequisite For Data Save": {
        "title": "Nibedita Prerequisite For Data Save",
        "type": "object",
        "properties": {
          "textFields": {
            "type": "array",
            "description": "Prerequisite text fields to save the document policy.",
            "items": {
              "$ref": "#/components/schemas/Nibedita text fields for Data Save"
            }
          }
        },
        "description": "Nibedita Prerequisite For Data Save"
      },
      "Nibedita Product Sum-Insured Details": {
        "title": "Nibedita Product Sum-Insured Details",
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product Code (System Predefined Code)",
            "example": "NIBEDITA_ORBIT, NIBEDITA_ECHO, GREEN_DELTA_PROTISRUTI etc"
          },
          "productName": {
            "type": "string",
            "description": "Product Name (System Predefined Name)",
            "example": "NIBEDITA ORBIT, NIBEDITA ECHO, Green Delta Protisruti etc."
          },
          "sumInsuredList": {
            "type": "array",
            "description": "Product Sum-Insured (The sum insured amount refers to the maximum amount of money that the company agrees to pay out in the event of a covered loss or claim) List",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "Nibedita Quotation Prerequisite": {
        "title": "Nibedita Quotation Prerequisite",
        "type": "object",
        "properties": {
          "dropdowns": {
            "description": "Dropdown values for Nibedita/GHI",
            "$ref": "#/components/schemas/Nibedita Dropdown Details"
          },
          "objectArrays": {
            "type": "array",
            "description": "For Nibedita Nominee can be multiple and will be save as arrays of object. In the object the nominee details will be provided",
            "items": {
              "$ref": "#/components/schemas/Object Arrays Details"
            }
          },
          "textFields": {
            "type": "array",
            "description": "Common text fields array with type and description",
            "items": {
              "$ref": "#/components/schemas/Common text field description"
            }
          }
        }
      },
      "Nibedita text fields for Data Save": {
        "title": "Nibedita text fields for Data Save",
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          },
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "occupation, construction"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          }
        },
        "description": "Nibedita text fields for Data Save"
      },
      "NomineeDetails": {
        "title": "NomineeDetails",
        "required": [
          "nomineeAddress",
          "nomineeDateOfBirth",
          "nomineeMobile",
          "nomineeName",
          "nomineeNid",
          "nomineeRelation",
          "nomineeSharePct"
        ],
        "type": "object",
        "properties": {
          "nomineeAddress": {
            "type": "string",
            "description": "Nominee Address",
            "example": "123 Main St, City"
          },
          "nomineeDateOfBirth": {
            "type": "string",
            "description": "Nominee Date of Birth",
            "example": "2023-12-25"
          },
          "nomineeEmail": {
            "type": "string",
            "description": "Nominee Valid Email Address",
            "example": "nominee@example.com"
          },
          "nomineeMobile": {
            "type": "string",
            "description": "Nominee Mobile Number",
            "example": "0123456789"
          },
          "nomineeName": {
            "type": "string",
            "description": "Nominee Name",
            "example": "John Doe"
          },
          "nomineeNid": {
            "type": "string",
            "description": "Nominee NID",
            "example": "1234567890"
          },
          "nomineeRelation": {
            "type": "string",
            "description": "Nominee Relation with the customer/client",
            "example": "Spouse"
          },
          "nomineeSharePct": {
            "type": "number",
            "description": "Nominee Share Percentage",
            "format": "double",
            "example": 50
          }
        },
        "description": "Nominee Details"
      },
      "Object Arrays Details": {
        "title": "Object Arrays Details",
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          },
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "situation, occupation"
          },
          "objectProperties": {
            "type": "array",
            "description": "Object properties details",
            "items": {
              "$ref": "#/components/schemas/Common text field description"
            }
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          }
        }
      },
      "People's Personal Accident Details": {
        "title": "People's Personal Accident Details",
        "type": "object",
        "properties": {
          "construction": {
            "type": "string",
            "description": "Customer Construction"
          },
          "nomineeDetails": {
            "type": "array",
            "description": "Nominee Details",
            "items": {
              "$ref": "#/components/schemas/NomineeDetails"
            }
          },
          "occupation": {
            "type": "string",
            "description": "Customer Occupation"
          }
        }
      },
      "People's Personal Accident Related text fields for Data Save": {
        "title": "People's Personal Accident Related text fields for Data Save",
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "occupation, construction"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          }
        },
        "description": "People's Personal Accident Related text fields for Data Save"
      },
      "Personal Accident": {
        "title": "Personal Accident",
        "type": "object",
        "properties": {
          "pacClassTypeCode": {
            "type": "string",
            "description": "PAC class type code (pre configured system value), A (Table-A), B(Table-B), C(Table-C)",
            "example": "A, B, C"
          },
          "pacCoverTypeCode": {
            "type": "string",
            "description": "PAC cover type code (pre configured system value)",
            "example": "A, AA, B, C"
          }
        }
      },
      "Personal Accident Prerequisite for Data Save": {
        "title": "Personal Accident Prerequisite for Data Save",
        "type": "object",
        "properties": {
          "textFields": {
            "type": "array",
            "description": "Prerequisite text fields to save the document policy.",
            "items": {
              "$ref": "#/components/schemas/Personal Accident Related text fields for Data Save"
            }
          }
        },
        "description": "Personal Accident Prerequisite for Data Save"
      },
      "Personal Accident Related text fields for Data Save": {
        "title": "Personal Accident Related text fields for Data Save",
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "string",
            "description": "Description of the text field."
          },
          "name": {
            "type": "string",
            "description": "Name of the field.",
            "example": "occupation, construction"
          },
          "required": {
            "type": "boolean",
            "description": "Indicated whether the field is mandatory to give or not.",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Type of the field.",
            "example": "String, int, float, boolean"
          }
        },
        "description": "Personal Accident Related text fields for Data Save"
      },
      "Place Visit Model": {
        "title": "Place Visit Model",
        "type": "object",
        "properties": {
          "placeVisit": {
            "type": "string",
            "description": "Place Visit (descriptive with county)"
          },
          "placeVisitCode": {
            "type": "string",
            "description": "Place Visit Code (Predefined System Code)",
            "example": "A, B, C etc."
          }
        }
      },
      "Prerequisite for Data Save": {
        "title": "Prerequisite for Data Save",
        "type": "object",
        "properties": {
          "textFields": {
            "type": "array",
            "description": "Prerequisite text fields to save the document policy.",
            "items": {
              "$ref": "#/components/schemas/People's Personal Accident Related text fields for Data Save"
            }
          }
        },
        "description": "Prerequisite for Data Save"
      },
      "Product Specific Information": {
        "title": "Product Specific Information",
        "type": "object",
        "properties": {
          "bnh": {
            "description": "BNH information",
            "$ref": "#/components/schemas/Business And Holidays"
          },
          "ens": {
            "description": "ENS information",
            "$ref": "#/components/schemas/Employment And Studies"
          },
          "mtr": {
            "description": "MTR information",
            "$ref": "#/components/schemas/Motor Quotation Model"
          },
          "pac": {
            "description": "PAC information",
            "$ref": "#/components/schemas/Personal Accident"
          }
        }
      },
      "Quotation Prerequsite Response": {
        "title": "Quotation Prerequsite Response",
        "type": "object",
        "properties": {
          "bnh": {
            "description": "Business and Holidays related prerequisite details",
            "$ref": "#/components/schemas/Business and Holidays Quotation Prerequisite Details"
          },
          "clientBankBranch": {
            "description": "Common client branch list",
            "$ref": "#/components/schemas/AggregatorClientBranchResponseVm"
          },
          "ens": {
            "description": "Employment and Studies related prerequisite details",
            "$ref": "#/components/schemas/Employment and Studies Quotation Prerequisite Details"
          },
          "ghi": {
            "description": "GHI product related prerequisite details",
            "$ref": "#/components/schemas/Nibedita Quotation Prerequisite"
          },
          "mtr": {
            "description": "Motor related prerequisite details",
            "$ref": "#/components/schemas/Motor Quotation Prerequisite Details"
          },
          "nib": {
            "description": "NIB product related prerequisite details",
            "$ref": "#/components/schemas/Nibedita Quotation Prerequisite"
          },
          "ppa": {
            "description": "Peoples personal accident related prerequisite details",
            "$ref": "#/components/schemas/Nibedita Quotation Prerequisite"
          }
        }
      },
      "ReplyStatus": {
        "title": "ReplyStatus",
        "type": "object",
        "properties": {
          "remarks": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "Request": {
        "title": "Request",
        "type": "object",
        "properties": {
          "agriculture": {
            "$ref": "#/components/schemas/AgriRequest"
          },
          "docID": {
            "type": "string"
          },
          "docIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mrNo": {
            "type": "string"
          },
          "nID": {
            "type": "string"
          }
        }
      },
      "RequestMessage": {
        "title": "RequestMessage",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "DEFAULT_VALUE",
              "change",
              "create",
              "delete",
              "get",
              "reply"
            ]
          },
          "api": {
            "type": "string",
            "enum": [
              "DEFAULT_VALUE",
              "agri",
              "agriMultiplePolicyInfo",
              "agriSinglePolicyInfo",
              "claimInfo",
              "claimLoss",
              "claimPaid",
              "customerInfo",
              "customerInfoWithDocInfo",
              "customerLogin",
              "documentInfo",
              "documentInterest",
              "documentMortgagee",
              "documentPeril",
              "findDoc",
              "isPersonalAccidentExist",
              "moneyReceipt",
              "motor",
              "motorInfo",
              "personalAccident",
              "shortDocumentInfo",
              "travel",
              "travelInfo"
            ]
          },
          "asyncReplyFlag": {
            "type": "boolean"
          },
          "correlationID": {
            "type": "string"
          },
          "messageID": {
            "type": "string"
          },
          "replyAddress": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/Request"
          },
          "source": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "Response": {
        "title": "Response",
        "type": "object",
        "properties": {
          "agriMultiplePolicyInfoResponse": {
            "$ref": "#/components/schemas/AgriMultiplePolicyInfoResponse"
          }
        }
      },
      "ResponseMessage": {
        "title": "ResponseMessage",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "DEFAULT_VALUE",
              "change",
              "create",
              "delete",
              "get",
              "reply"
            ]
          },
          "api": {
            "type": "string",
            "enum": [
              "DEFAULT_VALUE",
              "agri",
              "agriMultiplePolicyInfo",
              "agriSinglePolicyInfo",
              "claimInfo",
              "claimLoss",
              "claimPaid",
              "customerInfo",
              "customerInfoWithDocInfo",
              "customerLogin",
              "documentInfo",
              "documentInterest",
              "documentMortgagee",
              "documentPeril",
              "findDoc",
              "isPersonalAccidentExist",
              "moneyReceipt",
              "motor",
              "motorInfo",
              "personalAccident",
              "shortDocumentInfo",
              "travel",
              "travelInfo"
            ]
          },
          "correlationID": {
            "type": "string"
          },
          "messageID": {
            "type": "string"
          },
          "replyStatus": {
            "$ref": "#/components/schemas/ReplyStatus"
          },
          "response": {
            "$ref": "#/components/schemas/Response"
          },
          "source": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "Save Master Document Response": {
        "title": "Save Master Document Response",
        "type": "object",
        "properties": {
          "acknowledgedFileList": {
            "type": "array",
            "description": "List of attached files with the document",
            "example": "abc.jpg, xyz.pdf",
            "items": {
              "type": "string"
            }
          },
          "customerEmail": {
            "type": "string",
            "description": "Customer Email address",
            "example": "customer@customer.com"
          },
          "customerName": {
            "type": "string",
            "description": "Name of the customer",
            "example": "John Doe"
          },
          "docUrl": {
            "type": "string",
            "description": "PDF url of the saved document and money receipt",
            "example": "https://example.com/test/test/test"
          },
          "documentNumber": {
            "type": "string",
            "description": "Document Number",
            "example": "GDI/AHO/01/2024/MTR/T/480001"
          },
          "id": {
            "type": "integer",
            "description": "id of the saved document",
            "format": "int64",
            "example": 1234
          },
          "mrNumber": {
            "type": "string",
            "description": "Money Receipt Number",
            "example": "57000001"
          }
        }
      },
      "Search Customer Request Body": {
        "title": "Search Customer Request Body",
        "required": [
          "customerType",
          "searchText",
          "searchType"
        ],
        "type": "object",
        "properties": {
          "customerGroupCode": {
            "type": "string",
            "description": "Customer Group Code (if customerType is business then must provide customer group code otherwise optionl)",
            "example": "UNILIVER, ISPAHANI"
          },
          "customerType": {
            "type": "string",
            "description": "Type of the Customer",
            "example": "Personal, Business"
          },
          "searchText": {
            "type": "string",
            "description": "Keyword for search customer based on the selected searchType (if searchType is Mobile then searchText must be a valid mobile number)",
            "example": "01711111111, 987654321"
          },
          "searchType": {
            "type": "string",
            "description": "Customer Search Type referes (Specific Selected Criteria) based on selected customerType. SearchType must be within the given example list as it is.",
            "example": "For (PERSONAL -\u003E nid, tin, birthRegNo, passportNo), (BUSINESS -\u003E nid, tin, bin, mobileNo) one of these criteria must be selected."
          }
        }
      },
      "SearchMasterDocumentResponse": {
        "title": "SearchMasterDocumentResponse",
        "type": "object",
        "properties": {
          "masterDocList": {
            "type": "array",
            "description": "Search Document List based on the search text/parameter.",
            "items": {
              "$ref": "#/components/schemas/FireMasterDocVm"
            }
          },
          "pageCount": {
            "type": "integer",
            "description": "The total number of pages available in the search results.",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of search results matching the given search criteria across all pages.",
            "format": "int64"
          }
        }
      },
      "Sub Product Details Reponse": {
        "title": "Sub Product Details Reponse",
        "type": "object",
        "properties": {
          "ageLimitInfo": {
            "type": "string",
            "description": "Age limit of the customer/client who are eligiable for this proudct",
            "example": "16 years to 65 years"
          },
          "coverage": {
            "type": "string",
            "description": "Coverages of the product",
            "example": "List of coverages"
          },
          "description": {
            "type": "string",
            "description": "Description of the prouduct",
            "example": "Some long text description of the prouduct"
          },
          "exclusion": {
            "type": "string",
            "description": "Product Execlution List",
            "example": "List of exclusions"
          },
          "id": {
            "type": "integer",
            "description": "id of the product",
            "format": "int64",
            "example": 1
          },
          "keyFeature": {
            "type": "string",
            "description": "Key feature of the product",
            "example": "List of key features"
          },
          "productCode": {
            "type": "string",
            "description": "product code",
            "example": "NIB, ENS, MTR etc"
          },
          "productInfo": {
            "type": "string",
            "description": "Product Information",
            "example": "NIBEDITA, BNH, ENS etc"
          },
          "productName": {
            "type": "string",
            "description": "Name of the Product",
            "example": "Nibedita, Motor etc"
          },
          "sumInsuredInfo": {
            "type": "string",
            "description": "Range of sum-insured amount",
            "example": "BDT 50000 to BDT 2000000"
          },
          "title": {
            "type": "string",
            "description": "Title of the product",
            "example": "Full length title of the proudct"
          }
        }
      },
      "Timestamp": {
        "title": "Timestamp",
        "type": "object",
        "properties": {
          "date": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "nanos": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "timezoneOffset": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Underwriting Document Response for CRM": {
        "title": "Underwriting Document Response for CRM",
        "type": "object",
        "properties": {
          "masterDoc": {
            "description": "Master Document Response that holds values like net-premium, gross-premium etc.",
            "$ref": "#/components/schemas/Master Document Response For CRM"
          }
        }
      },
      "UnderwritingResponseVm": {
        "title": "UnderwritingResponseVm",
        "type": "object",
        "properties": {
          "masterDoc": {
            "description": "Master Document Response that holds values like net-premium, gross-premium etc.",
            "$ref": "#/components/schemas/MasterDocResponseVm"
          },
          "netPremiumCoInsurer": {
            "type": "number",
            "description": "Net-Premium of CoInsurer (except GDIC) portion.",
            "format": "double"
          }
        }
      },
      "User Authentication Request": {
        "title": "User Authentication Request",
        "required": [
          "password",
          "platform",
          "source",
          "username"
        ],
        "type": "object",
        "properties": {
          "password": {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string",
            "description": "password of an individual user",
            "example": "12345678"
          },
          "platform": {
            "pattern": "\\bWEB|APP\\b",
            "type": "string",
            "description": "Platform from which the request is being generated (e.g., WEB, APP)",
            "enum": [
              "APP",
              "WEB"
            ]
          },
          "source": {
            "type": "string",
            "description": "Source of authentication (e.g., EBL, ROBI, BBL, MTR, CRM, WEB, BNOV, MOBILE)"
          },
          "username": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "username of an individual user",
            "example": "19255"
          }
        }
      },
      "User Authentication Response After Successfull Authentication": {
        "title": "User Authentication Response After Successfull Authentication",
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access Token, which will be necessary for making further request almost everytime to validate authorization and security.",
            "example": "eyJraWQiOiJlOWNjZDMyYcFgU6PAHo3-9RkODkzNDMi"
          },
          "expiresIn": {
            "type": "string",
            "description": "Time in seconds until the token expires",
            "example": "2023-11-09 17:02:32.041"
          },
          "idToken": {
            "type": "string",
            "description": "ID Token provides identity information about the authenticated user.",
            "example": "eyJraWQiOiJlOWNjZDMyYcFgU6PAHo3-9RkODkzNDMi"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh Token, which is required for getting new Access Token when current access token expires.",
            "example": "eyJraWQiOiJlOWNjZDMyYcFgU6PAHo3-9RkODkzNDMi"
          },
          "remarks": {
            "type": "array",
            "description": "List of remarks",
            "items": {
              "type": "string"
            }
          },
          "scope": {
            "type": "string",
            "description": "Scope of token, what user is allowed to perform."
          },
          "timestamp": {
            "type": "string",
            "description": "Time and date of the execution",
            "example": "2023-11-09 17:02:32.041"
          },
          "tokenType": {
            "type": "string",
            "description": "Token Type",
            "example": "Bearer "
          }
        }
      }
    }
  }
}