{
	"openapi": "3.0.0",
	"info": {
		"title": "CIS Middleware Documentation",
		"description": "The purpose of this document is to describe data communication between Aggregator/Partner and GDIC CIS system",
		"contact": {
			"name": "GDIC IT",
			"url": "https://green-delta.com",
			"email": "itdev@green-delta.com"
		},
		"license": {
			
		},
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "https://<domain>:<port>",
			"description": "Production"
		},
		{
			"description": "Sandbox",
			"url": "https://<domain>:<port>"
		}
	],
	"security": [
		{
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	],
	"tags": [
		{
			"name": "Customer",
			"description": "Customer Controller"
		},
		{
			"name": "Document",
			"description": "Document Master Controller"
		},
		{
			"name": "Product",
			"description": "Product Controller"
		},
		{
			"name": "Quotation",
			"description": "Get Product Quotation Controller"
		},
		{
			"name": "User",
			"description": "User Login Controller"
		}
	],
	"paths": {
		"/api/add-customer": {
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Add A New Customer",
				"description": "Add a new customer and if successfull return a successfull message otherwise return error code and message.",
				"operationId": "addCustomerUsingPOST",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authentication Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddCustomerRequestVm"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataPack«string»"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/search-customer": {
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Search Customer by search parameteres",
				"description": "Returns customer by given customerType, GroupCode, searchText",
				"operationId": "searchCustomerUsingPOST",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authentication Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Search Customer Request Body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataPackSingle«Customer Response»"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/add-master-document": {
			"post": {
				"tags": [
					"Document"
				],
				"summary": "Save the document",
				"description": "Returns document number and Money Receipt number after save.",
				"operationId": "addMasterDocumentUsingPOST",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Bearer [token]",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Add Document Request"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataPackSingle«Add Document Response»"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/get-quotation": {
			"get": {
				"tags": [
					"Quotation"
				],
				"summary": "Get Quotation",
				"description": "Returns specific product's quotation.",
				"operationId": "getQuotationUsingGET",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authentication Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Get Quotation Request Body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Get Quotation Response"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/get-quotation-pre-requisite": {
			"get": {
				"tags": [
					"Quotation"
				],
				"summary": "Get Quotation Pre Requisite",
				"description": "Returns the list of quotation pre requsite.",
				"operationId": "getQuotationPreRequisiteUsingGET",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authentication Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataPackSingle«Quotation Pre Requsite Response»"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/get-product-list": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get product",
				"description": "Returns the list of the allowed products for showcasing with the product details like features, coverage, exclusions and also pre-requisite data list for getting quotations.",
				"operationId": "productServiceUsingGET",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authentication Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product Details Response"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/refresh-auth-token": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Refresh token",
				"description": "Returns a new token when the existing token is expires.",
				"operationId": "refrestAuthTokenUsingGET",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "Authentication Token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User Refresh Token Response"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		},
		"/api/user-authentication": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "User Authentication",
				"description": "Returns the access token if a valid user found according to given users credentials.",
				"operationId": "userAuthenticationUsingPOST",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User Authentication Request"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User Authentication Response"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, i.e. The client's request is malformed or contains errors, making it impossible for the server to understand or process the request."
					},
					"401": {
						"description": "Unauthorized, i.e. \t\tThe client's request is missing valid authentication credentials, or the provided credentials are invalid or insufficient to access the requested resource."
					},
					"412": {
						"description": "Precondition failed, i.e. The server received a client request with specific preconditions that were not met."
					},
					"415": {
						"description": "Method not allowed, i.e. The server cannot process the client's request because the provided media type or content format is not supported or acceptable."
					},
					"500": {
						"description": "Internal Server Error, i.e. The server encountered an unexpected error or condition that prevented it from processing the client's request."
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Add Document Request": {
				"title": "Add Document Request",
				"required": [
					"customerInfo",
					"loginUserInfo"
				],
				"type": "object",
				"properties": {
					"bnh": {
						"description": "Business & Holidays related details",
						"$ref": "#/components/schemas/BNHDetails"
					},
					"commonInfo": {
						"description": "Common Information for MR",
						"$ref": "#/components/schemas/CommonInfo"
					},
					"customerInfo": {
						"description": "Customer Information",
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"ens": {
						"description": "Employment and Studies related details",
						"$ref": "#/components/schemas/ENSDetails"
					},
					"forDataSave": {
						"type": "object",
						"description": "Exact quotation response will need to send in this object"
					},
					"loginUserInfo": {
						"description": "Login User Information",
						"$ref": "#/components/schemas/LoginUserInfo"
					},
					"mtr": {
						"description": "Motor product related details",
						"$ref": "#/components/schemas/MTRDetails"
					},
					"nib": {
						"description": "Nibedita product related details",
						"$ref": "#/components/schemas/NIBDetails"
					},
					"pac": {
						"description": "Personal Accident product related details",
						"$ref": "#/components/schemas/PACDetails"
					},
					"ppa": {
						"description": "People's Personal Accident product related details",
						"$ref": "#/components/schemas/PPADetails"
					}
				}
			},
			"Add Document Response": {
				"title": "Add Document Response",
				"type": "object",
				"properties": {
					"customerId": {
						"type": "integer",
						"description": "Customer ID",
						"format": "int64",
						"example": 100
					},
					"mrNumber": {
						"type": "string",
						"description": "MR Number",
						"example": "100001"
					},
					"policyNumber": {
						"type": "string",
						"description": "Policy Number",
						"example": "GDI/AHO/09/2023/MTR/T/600003"
					}
				}
			},
			"AddCustomerRequestVm": {
				"title": "AddCustomerRequestVm",
				"type": "object",
				"properties": {
					"customerInfo": {
						"description": "Customer information",
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"loginUserInfo": {
						"description": "Login user information",
						"$ref": "#/components/schemas/LoginUserInfo"
					}
				}
			},
			"BNHDetails": {
				"title": "BNHDetails",
				"type": "object",
				"properties": {
					"coveredLimit": {
						"type": "string",
						"description": "Covered Limit"
					},
					"custGender": {
						"type": "string",
						"description": "Customer Gender"
					},
					"custOccupation": {
						"type": "string",
						"description": "Customer Occupation"
					},
					"custPasspostNo": {
						"type": "string",
						"description": "Customer Passport Number"
					},
					"destCountryAddress": {
						"type": "string",
						"description": "Destination Country Address"
					},
					"doctorId": {
						"type": "string",
						"description": "Doctor ID"
					},
					"employerAddress": {
						"type": "string",
						"description": "Employer Address"
					},
					"employerName": {
						"type": "string",
						"description": "Employer Name"
					},
					"insuredOccupation": {
						"type": "string",
						"description": "Insured Occupation"
					},
					"interestInsured": {
						"type": "string",
						"description": "Interest Insured"
					},
					"medicalNonMedical": {
						"type": "string",
						"description": "Medical or Non-Medical"
					},
					"nameOfTheUsualPhysician": {
						"type": "string",
						"description": "Name of the Usual Physician"
					},
					"officeTelephoneNo": {
						"type": "string",
						"description": "Office Telephone Number"
					},
					"participant": {
						"type": "string",
						"description": "Participant"
					},
					"physicianTelephoneNoHome": {
						"type": "string",
						"description": "Physician Telephone Number (Home)"
					},
					"physicianTelephoneNoOffice": {
						"type": "string",
						"description": "Physician Telephone Number (Office)"
					},
					"planName": {
						"type": "string",
						"description": "Plan Name"
					},
					"planType": {
						"type": "string",
						"description": "Plan Type"
					},
					"reInsuredCountry": {
						"type": "string",
						"description": "Re-Insured Country"
					},
					"visaType": {
						"type": "string",
						"description": "Visa Type"
					}
				}
			},
			"Bnh": {
				"title": "Bnh",
				"type": "object",
				"properties": {
					"coveredLimit": {
						"type": "integer",
						"description": "Covered limit",
						"format": "int32",
						"example": 125000
					},
					"dayStay": {
						"type": "integer",
						"description": "Number of days for stay",
						"format": "int32",
						"example": 160
					},
					"placeVisitCode": {
						"type": "string",
						"description": "Place visit code",
						"example": "C"
					},
					"policyDuration": {
						"type": "string",
						"description": "Policy duration (short or full)",
						"example": "short"
					}
				}
			},
			"BnhDetails": {
				"title": "BnhDetails",
				"type": "object",
				"properties": {
					"medicalTypeList": {
						"type": "array",
						"description": "List of medical types for BNH",
						"items": {
							"$ref": "#/components/schemas/MedicalType"
						}
					},
					"placeVisitList": {
						"type": "array",
						"description": "List of place visit options for BNH",
						"items": {
							"$ref": "#/components/schemas/PlaceVisit"
						}
					},
					"planTypeList": {
						"type": "array",
						"description": "List of plan types for BNH",
						"items": {
							"$ref": "#/components/schemas/PlanType"
						}
					}
				}
			},
			"CommonInfo": {
				"title": "CommonInfo",
				"type": "object",
				"properties": {
					"customerBin": {
						"type": "string",
						"description": "Customer's BIN number",
						"example": "10909090"
					},
					"customerDob": {
						"type": "string",
						"description": "Customer's date of birth",
						"example": "2000-01-01"
					},
					"customerGroupCode": {
						"type": "string",
						"description": "Customer group code",
						"example": "UNILIVER"
					},
					"customerId": {
						"type": "integer",
						"description": "Customer ID for existing customers",
						"format": "int32",
						"example": 10
					},
					"customerMobile": {
						"type": "string",
						"description": "Customer's mobile number",
						"example": "01989989989"
					},
					"customerNid": {
						"type": "string",
						"description": "Customer's national ID",
						"example": "BHBHBHBHBH"
					},
					"customerTin": {
						"type": "string",
						"description": "Customer's TIN number",
						"example": "TIN-JGHGHGHGH"
					},
					"customerType": {
						"type": "string",
						"description": "Type of customer (BUSINESS or PERSONAL)",
						"example": "BUSINESS"
					},
					"documentValidFrom": {
						"type": "string",
						"description": "Validity start date of the document",
						"example": "2023-08-09"
					},
					"documentValidTo": {
						"type": "string",
						"description": "Validity end date of the document",
						"example": "2024-08-08"
					},
					"existingCustomer": {
						"type": "boolean"
					},
					"sumInsured": {
						"type": "integer",
						"description": "Sum insured amount",
						"format": "int32",
						"example": 100000
					}
				}
			},
			"Customer Response": {
				"title": "Customer Response",
				"type": "object",
				"properties": {
					"bin": {
						"type": "string",
						"description": "BIN (Business Identification Number) of the customer",
						"example": "123456789"
					},
					"birthRegNo": {
						"type": "string",
						"description": "Birth registration number of the customer",
						"example": "B9876543"
					},
					"companyRegAuthority": {
						"type": "string",
						"description": "Company registration authority of the customer",
						"example": "Government"
					},
					"companyType": {
						"type": "string",
						"description": "Type of the company",
						"example": "Corporation"
					},
					"contactAddress": {
						"type": "string",
						"description": "Contact address for the customer",
						"example": "789 Third St, City, Country"
					},
					"contactPerson": {
						"type": "string",
						"description": "Contact person for the customer",
						"example": "John Doe"
					},
					"customerGroupCode": {
						"type": "string",
						"description": "Customer group code",
						"example": "CG123"
					},
					"customerType": {
						"type": "string",
						"description": "Type of the customer",
						"example": "Individual"
					},
					"dateOfBirth": {
						"type": "string",
						"description": "Date of birth of the customer",
						"example": "1990-01-01"
					},
					"email": {
						"type": "string",
						"description": "Email address of the customer",
						"example": "test@example.com"
					},
					"fatherName": {
						"type": "string",
						"description": "Father's name of the customer",
						"example": "John Smith"
					},
					"firstName": {
						"type": "string",
						"description": "First Name Of The Customer",
						"example": "Test First Name"
					},
					"gender": {
						"type": "string",
						"description": "Gender of the customer",
						"example": "Male"
					},
					"id": {
						"type": "string",
						"description": "Auto increment id",
						"example": "123456"
					},
					"incomeSource": {
						"type": "string",
						"description": "Source of customer's income",
						"example": "Employment"
					},
					"lastName": {
						"type": "string",
						"description": "Last Name Of The Customer",
						"example": "Test Last Name"
					},
					"middleName": {
						"type": "string",
						"description": "Middle Name Of The Customer",
						"example": "Test Middle Name"
					},
					"mobileNo": {
						"type": "string",
						"description": "Auto increment id",
						"example": "1234567890"
					},
					"motherName": {
						"type": "string",
						"description": "Mother's name of the customer",
						"example": "Mary Smith"
					},
					"name": {
						"type": "string",
						"description": "Name of the customer",
						"example": "Test Customer Name"
					},
					"nationality": {
						"type": "string",
						"description": "Nationality of the customer",
						"example": "US"
					},
					"nid": {
						"type": "string",
						"description": "National ID number of the customer",
						"example": "1234567890"
					},
					"officeAddress": {
						"type": "string",
						"description": "Office address of the customer",
						"example": "101 Business Ave, City, Country"
					},
					"officeContactNumber": {
						"type": "string",
						"description": "Office contact number of the customer",
						"example": "+1234567890"
					},
					"passportExpireDate": {
						"type": "string",
						"description": "Passport expiry date of the customer",
						"example": "2025-01-01"
					},
					"passportNo": {
						"type": "string",
						"description": "Passport number of the customer",
						"example": "A1234567"
					},
					"permanentAddress": {
						"type": "string",
						"description": "Permanent address of the customer",
						"example": "456 Second St, City, Country"
					},
					"presentAddress": {
						"type": "string",
						"description": "Present address of the customer",
						"example": "123 Main St, City, Country"
					},
					"regIssueDate": {
						"type": "string",
						"description": "Registration issue date",
						"example": "2022-01-15"
					},
					"spouseName": {
						"type": "string",
						"description": "Spouse's name of the customer",
						"example": "Jane Smith"
					},
					"tin": {
						"type": "string",
						"description": "TIN (Tax Identification Number) of the customer",
						"example": "987654321"
					},
					"tradeLicenceNo": {
						"type": "string",
						"description": "Trade license number of the customer",
						"example": "T987654321"
					}
				}
			},
			"CustomerInfo": {
				"title": "CustomerInfo",
				"type": "object",
				"properties": {
					"bin": {
						"type": "string",
						"description": "BIN (Business Identification Number). Mandatory for business customers."
					},
					"birthRegNo": {
						"type": "string",
						"description": "Birth registration number (optional)."
					},
					"companyRegAuthority": {
						"type": "string",
						"description": "Company registration authority (optional)."
					},
					"companyType": {
						"type": "string",
						"description": "Type of company (e.g., REGISTERED). Required for business customers."
					},
					"contactAddress": {
						"type": "string",
						"description": "Contact address (optional)."
					},
					"contactPerson": {
						"type": "string",
						"description": "Contact person (optional)."
					},
					"customerGroupCode": {
						"type": "string",
						"description": "Customer group code (e.g., UNILIVER). Required for business customers."
					},
					"customerId": {
						"type": "integer",
						"description": "Customer ID. It will depend on whether it's a new customer or an existing one. customerId will given for existing customer otherwise it will be null",
						"format": "int32"
					},
					"customerType": {
						"type": "string",
						"description": "Type of customer (e.g., BUSINESS). Required for business customers."
					},
					"dateOfBirth": {
						"type": "string",
						"description": "Date of birth of the customer. Mandatory for personal customers. Required for new PERSONAL customer."
					},
					"email": {
						"type": "string",
						"description": "Email address of the customer. Mandatory for personal customers. Required for new customer."
					},
					"fatherName": {
						"type": "string",
						"description": "Father's name. Mandatory for personal customers."
					},
					"firstName": {
						"type": "string",
						"description": "First name of the customer. Mandatory for personal customers. Required for new PERSONAL customer. "
					},
					"gender": {
						"type": "string",
						"description": "Gender of the customer. Mandatory for personal customers. Required for new PERSONAL customer."
					},
					"incomeSource": {
						"type": "string",
						"description": "Source of income (optional)."
					},
					"insuredAddress": {
						"type": "string",
						"description": "Insured address. Mandatory for both existing and new customers. By default it can be customers permanent address. User can change the address as it will be consider as mailing address"
					},
					"lastName": {
						"type": "string",
						"description": "Last name of the customer (optional)."
					},
					"mobileNo": {
						"type": "string",
						"description": "Mobile number of the customer. Mandatory for both personal and business customers. Required for new customer."
					},
					"motherName": {
						"type": "string",
						"description": "Mother's name. Mandatory for personal customers."
					},
					"name": {
						"type": "string",
						"description": "Full name of the customer. Mandatory for both personal and business customers. Required for new customer."
					},
					"nationality": {
						"type": "string",
						"description": "Nationality of the customer (optional)."
					},
					"nid": {
						"type": "string",
						"description": "NID (National ID) (optional)."
					},
					"officeAddress": {
						"type": "string",
						"description": "Office address (optional)."
					},
					"officeContactNumber": {
						"type": "string",
						"description": "Office contact number (optional)."
					},
					"passportExpireDate": {
						"type": "string",
						"description": "Passport expiration date (if applicable). Mandatory when passport number (passportNo) is given."
					},
					"passportNo": {
						"type": "string",
						"description": "Passport number (if available). Mandatory when passport number is given."
					},
					"permanentAddress": {
						"type": "string",
						"description": "Permanent address of the customer. Required for both personal and business customers."
					},
					"presentAddress": {
						"type": "string",
						"description": "Present address of the customer (optional)."
					},
					"regIssueDate": {
						"type": "string",
						"description": "Registration issue date (optional)."
					},
					"spouseName": {
						"type": "string",
						"description": "Spouse's name. Mandatory for personal customers."
					},
					"tin": {
						"type": "string",
						"description": "TIN (Taxpayer Identification Number) (optional)."
					},
					"tradeLicenceNo": {
						"type": "string",
						"description": "Trade license number (optional)."
					}
				}
			},
			"DataPackSingle«Add Document Response»": {
				"title": "DataPackSingle«Add Document Response»",
				"type": "object",
				"properties": {
					"correlationID": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Add Document Response"
					},
					"messageID": {
						"type": "string"
					},
					"remarks": {
						"$ref": "#/components/schemas/DataRemarks"
					},
					"result": {
						"type": "boolean"
					},
					"timestamp": {
						"type": "string"
					}
				}
			},
			"DataPackSingle«Customer Response»": {
				"title": "DataPackSingle«Customer Response»",
				"type": "object",
				"properties": {
					"correlationID": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Customer Response"
					},
					"messageID": {
						"type": "string"
					},
					"remarks": {
						"$ref": "#/components/schemas/DataRemarks"
					},
					"result": {
						"type": "boolean"
					},
					"timestamp": {
						"type": "string"
					}
				}
			},
			"DataPackSingle«Quotation Pre Requsite Response»": {
				"title": "DataPackSingle«Quotation Pre Requsite Response»",
				"type": "object",
				"properties": {
					"correlationID": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Quotation Pre Requsite Response"
					},
					"messageID": {
						"type": "string"
					},
					"remarks": {
						"$ref": "#/components/schemas/DataRemarks"
					},
					"result": {
						"type": "boolean"
					},
					"timestamp": {
						"type": "string"
					}
				}
			},
			"DataPack«string»": {
				"title": "DataPack«string»",
				"type": "object",
				"properties": {
					"correlationID": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"messageID": {
						"type": "string"
					},
					"remarks": {
						"$ref": "#/components/schemas/DataRemarks"
					},
					"result": {
						"type": "boolean"
					},
					"timestamp": {
						"type": "string"
					}
				}
			},
			"DataRemarks": {
				"title": "DataRemarks",
				"type": "object",
				"properties": {
					"errors": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"success": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"ENSDetails": {
				"title": "ENSDetails",
				"type": "object",
				"properties": {
					"coveredLimit": {
						"type": "string",
						"description": "Covered Limit"
					},
					"custGender": {
						"type": "string",
						"description": "Customer Gender"
					},
					"custOccupation": {
						"type": "string",
						"description": "Customer Occupation"
					},
					"custPasspostNo": {
						"type": "string",
						"description": "Customer Passport Number"
					},
					"destCountryAddress": {
						"type": "string",
						"description": "Destination Country Address"
					},
					"doctorId": {
						"type": "string",
						"description": "Doctor ID"
					},
					"employerAddress": {
						"type": "string",
						"description": "Employer Address"
					},
					"employerName": {
						"type": "string",
						"description": "Employer Name"
					},
					"insuredOccupation": {
						"type": "string",
						"description": "Insured Occupation"
					},
					"interestInsured": {
						"type": "string",
						"description": "Interest Insured"
					},
					"medicalNonMedical": {
						"type": "string",
						"description": "Medical or Non-Medical"
					},
					"nameOfTheUsualPhysician": {
						"type": "string",
						"description": "Name of the Usual Physician"
					},
					"officeTelephoneNo": {
						"type": "string",
						"description": "Office Telephone Number"
					},
					"participant": {
						"type": "string",
						"description": "Participant"
					},
					"physicianTelephoneNoHome": {
						"type": "string",
						"description": "Physician Telephone Number (Home)"
					},
					"physicianTelephoneNoOffice": {
						"type": "string",
						"description": "Physician Telephone Number (Office)"
					},
					"planName": {
						"type": "string",
						"description": "Plan Name"
					},
					"planType": {
						"type": "string",
						"description": "Plan Type"
					},
					"reInsuredCountry": {
						"type": "string",
						"description": "Re-Insured Country"
					},
					"visaType": {
						"type": "string",
						"description": "Visa Type"
					}
				}
			},
			"Ens": {
				"title": "Ens",
				"type": "object",
				"properties": {
					"conversionRateUsdToBdt": {
						"type": "integer",
						"description": "Conversion rate from USD to BDT",
						"format": "int32",
						"example": 90
					},
					"coveredLimit": {
						"type": "integer",
						"description": "Covered limit",
						"format": "int32",
						"example": 125000
					},
					"dayStay": {
						"type": "integer",
						"description": "Number of days for stay",
						"format": "int32",
						"example": 0
					},
					"ensType": {
						"type": "string",
						"description": "ENS type",
						"example": "Employment"
					},
					"monthStay": {
						"type": "integer",
						"description": "Number of months for stay",
						"format": "int32",
						"example": 8
					},
					"numberOfChild": {
						"type": "integer",
						"description": "Number of children",
						"format": "int32",
						"example": 0
					},
					"numberOfPerson": {
						"type": "integer",
						"description": "Number of persons",
						"format": "int32",
						"example": 1
					},
					"placeVisitCode": {
						"type": "string",
						"description": "Place visit code",
						"example": "B"
					},
					"stampDutyType": {
						"type": "string",
						"description": "Stamp duty type (Recoverable or Non-Recoverable)",
						"example": "Recoverable"
					}
				}
			},
			"EnsDetails": {
				"title": "EnsDetails",
				"type": "object",
				"properties": {
					"ensTypeList": {
						"type": "array",
						"description": "List of ENS types",
						"items": {
							"$ref": "#/components/schemas/EnsType"
						}
					},
					"medicalTypeList": {
						"type": "array",
						"description": "List of medical types",
						"items": {
							"$ref": "#/components/schemas/MedicalType"
						}
					},
					"placeVisitList": {
						"type": "array",
						"description": "List of place visit options",
						"items": {
							"$ref": "#/components/schemas/PlaceVisit"
						}
					},
					"planTypeList": {
						"type": "array",
						"description": "List of plan types",
						"items": {
							"$ref": "#/components/schemas/PlanType"
						}
					}
				}
			},
			"EnsType": {
				"title": "EnsType",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "ENS type name"
					},
					"value": {
						"type": "string",
						"description": "ENS type value"
					}
				}
			},
			"ForDataSave": {
				"title": "ForDataSave",
				"type": "object"
			},
			"Get Quotation Request Body": {
				"title": "Get Quotation Request Body",
				"type": "object",
				"properties": {
					"commonInfo": {
						"description": "Common information",
						"$ref": "#/components/schemas/CommonInfo"
					},
					"productCode": {
						"type": "string",
						"description": "Product code",
						"example": "NIB"
					},
					"productSpecificInfo": {
						"description": "Product-specific information",
						"$ref": "#/components/schemas/ProductSpecificInfo"
					}
				}
			},
			"Get Quotation Response": {
				"title": "Get Quotation Response",
				"type": "object",
				"properties": {
					"discountAmount": {
						"type": "number",
						"description": "Discount amount",
						"format": "double",
						"example": 0
					},
					"forDataSave": {
						"description": "Data for saving purposes",
						"$ref": "#/components/schemas/ForDataSave"
					},
					"grossPremium": {
						"type": "number",
						"description": "Gross premium amount",
						"format": "double",
						"example": 10485
					},
					"netPremium": {
						"type": "number",
						"description": "Net premium amount",
						"format": "double",
						"example": 9100
					},
					"policyDuration": {
						"description": "Policy duration details",
						"$ref": "#/components/schemas/PolicyDuration"
					},
					"policyValidFrom": {
						"type": "string",
						"description": "Policy valid from date",
						"example": "2023-10-24"
					},
					"policyValidTo": {
						"type": "string",
						"description": "Policy valid to date",
						"example": "2024-10-23"
					},
					"stampAmount": {
						"type": "number",
						"description": "Stamp amount",
						"format": "double",
						"example": 20
					},
					"vatAmount": {
						"type": "number",
						"description": "VAT amount",
						"format": "double",
						"example": 1365
					}
				}
			},
			"LoginUserInfo": {
				"title": "LoginUserInfo",
				"required": [
					"employeeId",
					"name",
					"role"
				],
				"type": "object",
				"properties": {
					"branchCode": {
						"type": "string",
						"description": "Branch Code"
					},
					"clientCode": {
						"type": "string",
						"description": "Client Code"
					},
					"designation": {
						"type": "string",
						"description": "Designation"
					},
					"employeeId": {
						"type": "string",
						"description": "Employee ID"
					},
					"mobile": {
						"type": "string",
						"description": "Mobile Number"
					},
					"name": {
						"type": "string",
						"description": "Name"
					},
					"role": {
						"type": "string",
						"description": "Role",
						"example": "Manager, RM, Sales"
					}
				}
			},
			"MTRDetails": {
				"title": "MTRDetails",
				"type": "object",
				"properties": {
					"companyOrModelName": {
						"type": "string",
						"description": "Company or Model Name"
					},
					"fitnessExpiryDate": {
						"type": "string",
						"description": "Fitness Expiry Date"
					},
					"manufactureYear": {
						"type": "string",
						"description": "Manufacture Year"
					},
					"manufacturer": {
						"type": "string",
						"description": "Manufacturer"
					},
					"motorEngineAndChassisNumber": {
						"type": "string",
						"description": "Motor Engine and Chassis Number"
					},
					"motorMakeAndBodyType": {
						"type": "string",
						"description": "Motor Make and Body Type"
					},
					"motorModelNumber": {
						"type": "string",
						"description": "Motor Model Number"
					},
					"motorTermsOfUseId": {
						"type": "string",
						"description": "Motor Terms of Use ID"
					},
					"nameOfRegistrationAuthority": {
						"type": "string",
						"description": "Name of Registration Authority"
					},
					"taxToken": {
						"type": "string",
						"description": "Tax Token"
					}
				}
			},
			"MedicalType": {
				"title": "MedicalType",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Medical type name"
					},
					"value": {
						"type": "string",
						"description": "Medical type value"
					}
				}
			},
			"MotorCCName": {
				"title": "MotorCCName",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "CC Name"
					},
					"value": {
						"type": "string",
						"description": "CC Value"
					}
				}
			},
			"MotorPlanType": {
				"title": "MotorPlanType",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Plan Type Name"
					},
					"value": {
						"type": "string",
						"description": "Plan Type Value"
					}
				}
			},
			"MotorVehicle": {
				"title": "MotorVehicle",
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"description": "Vehicle Description"
					},
					"vehicleName": {
						"type": "string",
						"description": "Vehicle Name"
					}
				}
			},
			"Mtr": {
				"title": "Mtr",
				"type": "object",
				"properties": {
					"avlsDiscount": {
						"type": "boolean",
						"description": "Whether AVLs discount is available",
						"example": true
					},
					"comprehensiveRate": {
						"type": "integer",
						"description": "Comprehensive rate",
						"format": "int32",
						"example": 0
					},
					"customerId": {
						"type": "integer",
						"description": "Customer ID",
						"format": "int32",
						"example": 70734
					},
					"exclusionPerilList": {
						"type": "array",
						"items": {
							"type": "integer",
							"format": "int32"
						}
					},
					"fitnessExpiryDate": {
						"type": "string",
						"description": "Fitness expiry date",
						"example": "2023-07-19"
					},
					"loadingRate": {
						"type": "integer",
						"description": "Loading rate",
						"format": "int32",
						"example": 0
					},
					"lumpSumAmount": {
						"type": "integer",
						"description": "Lump sum amount",
						"format": "int32",
						"example": 0
					},
					"manufactureYear": {
						"type": "string",
						"description": "Manufacture year",
						"example": "2019"
					},
					"motorTermsOfUseId": {
						"type": "integer",
						"description": "Motor terms of use ID",
						"format": "int32",
						"example": 1
					},
					"mtrCcTon": {
						"type": "string",
						"description": "MTR CC ton type (CC or Ton)",
						"example": "CC"
					},
					"mtrCcTonValue": {
						"type": "integer",
						"description": "MTR CC ton value",
						"format": "int32",
						"example": 200
					},
					"mtrConductorAmount": {
						"type": "integer",
						"description": "Conductor amount",
						"format": "int32",
						"example": 0
					},
					"mtrConductorRate": {
						"type": "integer",
						"description": "Conductor rate",
						"format": "int32",
						"example": 0
					},
					"mtrDriverTimesMultiply": {
						"type": "integer",
						"description": "Multiplier for driver count",
						"format": "int32",
						"example": 1
					},
					"mtrGuideAmount": {
						"type": "integer",
						"description": "Guide amount",
						"format": "int32",
						"example": 0
					},
					"mtrGuideRate": {
						"type": "integer",
						"description": "Guide rate",
						"format": "int32",
						"example": 0
					},
					"mtrHelperTimesMultiply": {
						"type": "integer",
						"description": "Multiplier for helper count",
						"format": "int32",
						"example": 1
					},
					"mtrNoOfConductor": {
						"type": "integer",
						"description": "Number of conductors",
						"format": "int32",
						"example": 0
					},
					"mtrNoOfDriver": {
						"type": "integer",
						"description": "Number of drivers",
						"format": "int32",
						"example": 1
					},
					"mtrNoOfGuide": {
						"type": "integer",
						"description": "Number of guides",
						"format": "int32",
						"example": 0
					},
					"mtrNoOfHelper": {
						"type": "integer",
						"description": "Number of helpers",
						"format": "int32",
						"example": 0
					},
					"mtrNoOfPassenger": {
						"type": "integer",
						"description": "Number of passengers",
						"format": "int32",
						"example": 1
					},
					"mtrPassengerTimesMultiply": {
						"type": "integer",
						"description": "Multiplier for passenger count",
						"format": "int32",
						"example": 1
					},
					"mtrPlanName": {
						"type": "string",
						"description": "MTR plan name",
						"example": "Comprehensive"
					},
					"mtrVehicleId": {
						"type": "integer",
						"description": "MTR vehicle ID",
						"format": "int32",
						"example": 1
					},
					"mtrVehicleType": {
						"type": "string",
						"description": "MTR vehicle type",
						"example": "Private"
					},
					"namedDriver": {
						"type": "boolean",
						"description": "Whether named driver is available",
						"example": false
					},
					"ncbRate": {
						"type": "integer",
						"description": "No Claim Bonus rate",
						"format": "int32",
						"example": 0
					},
					"oppositePurposeUseLoading": {
						"type": "boolean",
						"description": "Whether loading is applicable for opposite purpose use",
						"example": true
					},
					"policyDuration": {
						"type": "string",
						"description": "Policy duration (short or full)",
						"example": "full"
					},
					"stampAmount": {
						"type": "integer",
						"description": "Stamp amount",
						"format": "int32",
						"example": 500
					},
					"stampDutyType": {
						"type": "string",
						"description": "Stamp duty type (Recoverable or Non-Recoverable)",
						"example": "Non-Recoverable"
					},
					"sumInsured": {
						"type": "integer",
						"description": "Sum insured amount",
						"format": "int32",
						"example": 2000000
					},
					"taxFreeVehicle": {
						"type": "boolean",
						"description": "Whether the vehicle is tax-free",
						"example": true
					},
					"taxToken": {
						"type": "string",
						"description": "Tax token number",
						"example": "3425345"
					},
					"techometerVehicle": {
						"type": "boolean",
						"description": "Whether the vehicle has a tachometer",
						"example": true
					},
					"totalDays": {
						"type": "integer",
						"description": "Total days for policy",
						"format": "int32",
						"example": 365
					},
					"vatRate": {
						"type": "integer",
						"description": "VAT rate",
						"format": "int32",
						"example": 15
					},
					"vehicleRegistrationNumber": {
						"type": "string",
						"description": "Vehicle registration number",
						"example": "323425"
					}
				}
			},
			"MtrDetails": {
				"title": "MtrDetails",
				"type": "object",
				"properties": {
					"motorCCNames": {
						"type": "array",
						"description": "List of motor CC names",
						"items": {
							"$ref": "#/components/schemas/MotorCCName"
						}
					},
					"motorPlanTypes": {
						"type": "array",
						"description": "List of motor plan types",
						"items": {
							"$ref": "#/components/schemas/MotorPlanType"
						}
					},
					"mtrPerilExclusion": {
						"type": "array",
						"description": "List of MTR peril exclusions",
						"items": {
							"$ref": "#/components/schemas/MtrPerilExclusion"
						}
					},
					"mtrVehicleList": {
						"type": "array",
						"description": "List of MTR vehicle details",
						"items": {
							"$ref": "#/components/schemas/MtrVehicle"
						}
					},
					"vehicleTypes": {
						"type": "array",
						"description": "List of vehicle types",
						"items": {
							"$ref": "#/components/schemas/VehicleType"
						}
					}
				}
			},
			"MtrPerilExclusion": {
				"title": "MtrPerilExclusion",
				"type": "object",
				"properties": {
					"classCode": {
						"type": "string",
						"description": "Class Code"
					},
					"deptCode": {
						"type": "string",
						"description": "Department Code"
					},
					"id": {
						"type": "integer",
						"description": "Peril ID",
						"format": "int32"
					},
					"perilCode": {
						"type": "string",
						"description": "Peril Code"
					},
					"perilName": {
						"type": "string",
						"description": "Peril Name"
					}
				}
			},
			"MtrProduct": {
				"title": "MtrProduct",
				"type": "object",
				"properties": {
					"motorCCNames": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MotorCCName"
						}
					},
					"motorPlanTypes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MotorPlanType"
						}
					},
					"mtrPerilExclusion": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MtrPerilExclusion"
						}
					},
					"mtrVehicleList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MotorVehicle"
						}
					},
					"vehicleTypes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/VehicleType"
						}
					}
				}
			},
			"MtrVehicle": {
				"title": "MtrVehicle",
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"description": "Vehicle description"
					},
					"vehicleName": {
						"type": "string",
						"description": "Vehicle name"
					}
				}
			},
			"NIBDetails": {
				"title": "NIBDetails",
				"type": "object",
				"properties": {
					"construction": {
						"type": "string",
						"description": "Construction"
					},
					"nomineeDetails": {
						"type": "array",
						"description": "Nominee Details",
						"items": {
							"$ref": "#/components/schemas/NomineeDetails"
						}
					},
					"occupation": {
						"type": "string",
						"description": "Occupation"
					}
				}
			},
			"NibProduct": {
				"title": "NibProduct",
				"type": "object",
				"properties": {
					"productCode": {
						"type": "string",
						"description": "Product code"
					},
					"productName": {
						"type": "string",
						"description": "Product name"
					},
					"sumInsuredList": {
						"type": "array",
						"description": "List of sum insured values",
						"items": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			},
			"NomineeDetails": {
				"title": "NomineeDetails",
				"required": [
					"nomineeAddress",
					"nomineeDateOfBirth",
					"nomineeEmail",
					"nomineeMobile",
					"nomineeName",
					"nomineeNid",
					"nomineeRelation",
					"nomineeSharePct"
				],
				"type": "object",
				"properties": {
					"nomineeAddress": {
						"type": "string",
						"description": "Nominee Address",
						"example": "123 Main St, City"
					},
					"nomineeDateOfBirth": {
						"type": "string",
						"description": "Nominee Date of Birth",
						"example": "2023-12-25"
					},
					"nomineeEmail": {
						"type": "string",
						"description": "Nominee Email",
						"example": "nominee@example.com"
					},
					"nomineeMobile": {
						"type": "string",
						"description": "Nominee Mobile Number",
						"example": "0123456789"
					},
					"nomineeName": {
						"type": "string",
						"description": "Nominee Name",
						"example": "John Doe"
					},
					"nomineeNid": {
						"type": "string",
						"description": "Nominee NID",
						"example": "1234567890"
					},
					"nomineeRelation": {
						"type": "string",
						"description": "Nominee Relation",
						"example": "Spouse"
					},
					"nomineeSharePct": {
						"type": "integer",
						"description": "Nominee Share Percentage",
						"format": "int32",
						"example": 100
					}
				}
			},
			"PACDetails": {
				"title": "PACDetails",
				"type": "object",
				"properties": {
					"construction": {
						"type": "string",
						"description": "Construction"
					},
					"nomineeDetails": {
						"type": "array",
						"description": "Nominee Details",
						"items": {
							"$ref": "#/components/schemas/NomineeDetails"
						}
					},
					"occupation": {
						"type": "string",
						"description": "Occupation"
					}
				}
			},
			"PPADetails": {
				"title": "PPADetails",
				"type": "object",
				"properties": {
					"construction": {
						"type": "string",
						"description": "Construction"
					},
					"nomineeDetails": {
						"type": "array",
						"description": "Nominee Details",
						"items": {
							"$ref": "#/components/schemas/NomineeDetails"
						}
					},
					"occupation": {
						"type": "string",
						"description": "Occupation"
					}
				}
			},
			"Pac": {
				"title": "Pac",
				"type": "object",
				"properties": {
					"pacClassTypeCode": {
						"type": "string",
						"description": "PAC class type code",
						"example": "PAC123"
					},
					"pacCoverTypeCode": {
						"type": "string",
						"description": "PAC cover type code",
						"example": "COVER456"
					}
				}
			},
			"PacClassDetails": {
				"title": "PacClassDetails",
				"type": "object",
				"properties": {
					"classCode": {
						"type": "string",
						"description": "Class Code"
					},
					"className": {
						"type": "string",
						"description": "Class Name"
					},
					"pacOccupationList": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"PacCoverTypeDetails": {
				"title": "PacCoverTypeDetails",
				"type": "object",
				"properties": {
					"coverTypeCode": {
						"type": "string",
						"description": "Cover Type Code"
					},
					"coverTypeName": {
						"type": "string",
						"description": "Cover Type Name"
					}
				}
			},
			"PacDetails": {
				"title": "PacDetails",
				"type": "object",
				"properties": {
					"pacClassDetailsList": {
						"type": "array",
						"description": "List of PAC class details",
						"items": {
							"$ref": "#/components/schemas/PacClassDetails"
						}
					},
					"pacCoverTypeDetailsList": {
						"type": "array",
						"description": "List of PAC cover type details",
						"items": {
							"$ref": "#/components/schemas/PacCoverTypeDetails"
						}
					}
				}
			},
			"PacProduct": {
				"title": "PacProduct",
				"type": "object",
				"properties": {
					"pacClassDetailsList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PacClassDetails"
						}
					},
					"pacCoverTypeDetailsList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PacCoverTypeDetails"
						}
					}
				}
			},
			"PlaceVisit": {
				"title": "PlaceVisit",
				"type": "object",
				"properties": {
					"placeVisit": {
						"type": "string",
						"description": "Place Visit"
					},
					"placeVisitCode": {
						"type": "string",
						"description": "Place Visit Code"
					}
				}
			},
			"PlanType": {
				"title": "PlanType",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Plan type name"
					},
					"value": {
						"type": "string",
						"description": "Plan type value"
					}
				}
			},
			"PolicyDuration": {
				"title": "PolicyDuration",
				"type": "object",
				"properties": {
					"day": {
						"type": "integer",
						"description": "Number of days",
						"format": "int32",
						"example": 365
					},
					"month": {
						"type": "integer",
						"description": "Number of months",
						"format": "int32",
						"example": 12
					},
					"year": {
						"type": "integer",
						"description": "Number of years",
						"format": "int32",
						"example": 1
					},
					"yearMonthDay": {
						"type": "string",
						"description": "Formatted duration",
						"example": "year: 1, month: 12, day: 365"
					}
				}
			},
			"PpaDetails": {
				"title": "PpaDetails",
				"type": "object"
			},
			"PpaProduct": {
				"title": "PpaProduct",
				"type": "object"
			},
			"Product Details Response": {
				"title": "Product Details Response",
				"type": "object",
				"properties": {
					"getQuotationPrerequisite": {
						"$ref": "#/components/schemas/getQuotationPrerequisite"
					},
					"productList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/productList"
						}
					}
				}
			},
			"ProductSpecificInfo": {
				"title": "ProductSpecificInfo",
				"type": "object",
				"properties": {
					"bnh": {
						"description": "BNH information",
						"$ref": "#/components/schemas/Bnh"
					},
					"ens": {
						"description": "ENS information",
						"$ref": "#/components/schemas/Ens"
					},
					"mtr": {
						"description": "MTR information",
						"$ref": "#/components/schemas/Mtr"
					},
					"pac": {
						"description": "PAC information",
						"$ref": "#/components/schemas/Pac"
					}
				}
			},
			"Quotation Pre Requsite Response": {
				"title": "Quotation Pre Requsite Response",
				"type": "object",
				"properties": {
					"bnh": {
						"description": "BNH details",
						"$ref": "#/components/schemas/BnhDetails",
						"example": "{\"placeVisitList\":[{\"placeVisit\":\"Hospital A\",\"placeVisitCode\":\"A\"}],\"planTypeList\":[{\"name\":\"Plan A\",\"value\":\"A\"}],\"medicalTypeList\":[{\"name\":\"Medical\",\"value\":\"Medical\"}]}"
					},
					"ens": {
						"description": "ENS details",
						"$ref": "#/components/schemas/EnsDetails",
						"example": "{\"placeVisitList\":[{\"placeVisit\":\"Plan \\\"C\\\" : For Schengen Countries and Worldwide Excluding USA and Canada\",\"placeVisitCode\":\"A\"}],\"planTypeList\":[{\"name\":\"A\",\"value\":\"A\"}],\"medicalTypeList\":[{\"name\":\"Medical\",\"value\":\"Medical\"}],\"ensTypeList\":[{\"name\":\"Study\",\"value\":\"Study\"}]}"
					},
					"mtr": {
						"description": "MTR details",
						"$ref": "#/components/schemas/MtrDetails",
						"example": "{\"motorPlanTypes\":[{\"name\":\"Plan A\",\"value\":\"A\"}],\"vehicleTypes\":[{\"name\":\"Car\",\"value\":\"A\"}],\"motorCCNames\":[{\"name\":\"CC1\",\"value\":\"A\"}],\"mtrVehicleList\":[{\"vehicleName\":\"Vehicle A\",\"description\":\"Description A\"}],\"mtrPerilExclusion\":[{\"id\":1,\"deptCode\":\"DeptA\",\"classCode\":\"ClassA\",\"perilCode\":\"PerilA\",\"perilName\":\"Peril NameA\"}]}"
					},
					"nib": {
						"type": "array",
						"description": "NIB products",
						"example": "[{\"productCode\":\"NIBEDITA_ECO\",\"productName\":\"NIBEDITA ECO\",\"sumInsuredList\":[50000,100000,150000,200000]},{\"productCode\":\"NIBEDITA_REGULAR\",\"productName\":\"NIBEDITA REGULAR\",\"sumInsuredList\":[100000,200000,300000,400000,500000,600000,700000,800000,900000,1000000]},{\"productCode\":\"NIBEDITA_PLUS\",\"productName\":\"NIBEDITA PLUS\",\"sumInsuredList\":[500000,1000000,2000000,3000000,4000000,5000000]}]",
						"items": {
							"$ref": "#/components/schemas/NibProduct"
						}
					},
					"pac": {
						"description": "PAC details",
						"$ref": "#/components/schemas/PacDetails",
						"example": "{\"pacClassDetailsList\":[{\"classCode\":\"A\",\"className\":\"Plan - A\",\"pacOccupationList\":[\"Accountants\",\"Bankers\",\"Barristers\",\"Medical Practitioners\",\"Mercantile Assistants\",\"Engaged solely in Executive\",\"Administrative\",\"Clerical duties\"]}],\"pacCoverTypeDetailsList\":[{\"coverTypeCode\":\"A\",\"coverTypeName\":\"TABLE-A- Personal Accidental death permanent & temporary disablement including Medical Expenses.\"}]}"
					},
					"ppa": {
						"description": "PPA details",
						"$ref": "#/components/schemas/PpaDetails"
					}
				}
			},
			"Search Customer Request Body": {
				"title": "Search Customer Request Body",
				"required": [
					"customerGroupCode",
					"customerType",
					"searchText",
					"searchType"
				],
				"type": "object",
				"properties": {
					"customerGroupCode": {
						"type": "string",
						"description": "Customer Group Code (if customerType is business then have to provide group code)",
						"example": "UNILIVER, ISPAHANI"
					},
					"customerType": {
						"type": "string",
						"description": "Customer Type",
						"example": "Personal, Business"
					},
					"searchText": {
						"type": "string",
						"description": "Keyword for search customer based on the selected searchType",
						"example": "Mobile: 01711111111, NID: 987654321"
					},
					"searchType": {
						"type": "string",
						"description": "Customer Search By Specific Selected Criteria",
						"example": "Mobile Number, BIN, TIN, NID"
					}
				}
			},
			"SubProduct": {
				"title": "SubProduct",
				"type": "object",
				"properties": {
					"ageLimitInfo": {
						"type": "string",
						"description": "Sub-Product Age Limit Information",
						"example": "Age limit is 16 years to 65 years"
					},
					"coverage": {
						"type": "string",
						"description": "Sub-Product Coverage",
						"example": "<ul _ngcontent-bcn-c140><li _ngcontent-bcn-c140> Accidental Death </li>"
					},
					"description": {
						"type": "string",
						"description": "Sub-Product Description",
						"example": "<p>Providing affordable comprehensive insurance coverage to females. Ensuring best Insurance Service in Urban and Rural area</p>"
					},
					"exclusion": {
						"type": "string",
						"description": "Sub-Product Exclusion",
						"example": "<ul _ngcontent-bcn-c140><li _ngcontent-bcn-c140> Pre-existing disability. </li>"
					},
					"id": {
						"type": "integer",
						"description": "Sub-Product ID",
						"format": "int32"
					},
					"keyfeature": {
						"type": "string",
						"description": "Sub-Product Key Features",
						"example": "<ul><li> </li><li> Ensuring best available insurance facilities </li><li>"
					},
					"productCode": {
						"type": "string",
						"description": "Sub-Product Code"
					},
					"productInfo": {
						"type": "string",
						"description": "Sub-Product Information",
						"example": "NIBEDITA ECO"
					},
					"productName": {
						"type": "string",
						"description": "Sub-Product Name"
					},
					"sumInsuredInfo": {
						"type": "string",
						"description": "Sub-Product Sum Insured Information",
						"example": "BDT 50,000 to BDT 2,00,000"
					},
					"title": {
						"type": "string",
						"description": "Sub-Product Title",
						"example": "<h2>Comprehensive Insurance Policy For Women</h2>"
					}
				}
			},
			"User Authentication Request": {
				"title": "User Authentication Request",
				"required": [
					"password",
					"platform",
					"source",
					"username"
				],
				"type": "object",
				"properties": {
					"password": {
						"type": "string",
						"description": "User's password",
						"example": "12345678"
					},
					"platform": {
						"type": "string",
						"description": "Platform from which the request is made (e.g., WEB, APP)",
						"enum": [
							"APP",
							"WEB"
						]
					},
					"source": {
						"type": "string",
						"description": "Source of authentication (e.g., EBL, ROBI, BRAC)",
						"enum": [
							"BRAC",
							"EBL",
							"ROBI"
						]
					},
					"username": {
						"type": "string",
						"description": "User's username",
						"example": "19255"
					}
				}
			},
			"User Authentication Response": {
				"title": "User Authentication Response",
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"description": "Access Token",
						"example": "eyJraWQiOiJlOWNjZDMyYy02OTllLTQ1MjItYjE1MC03MjM5ODRkODkzNDMi"
					},
					"error": {
						"type": "array",
						"description": "List of errors",
						"items": {
							"type": "string"
						}
					},
					"expiresIn": {
						"type": "integer",
						"description": "Time in seconds until the token expires",
						"format": "int32",
						"example": 35999
					},
					"idToken": {
						"type": "string",
						"description": "ID Token",
						"example": "eyJraWQiOiJlOWNjZDMyYcFgU6PAHo3-9RkODkzNDMi"
					},
					"refreshToken": {
						"type": "string",
						"description": "Refresh Token",
						"example": "3Lp8hM4I3iBZtyqVK7Lt4_DGtO1D3pd6Cryq1dzT44S5jTPNxhiE1ErPTQxg60or0vZAPhJYGtafSsv05keSgYcWryCUHGCfzlQ_1caPrNO_ixaLlgXhAPtQypMvTTHD"
					},
					"scope": {
						"type": "string",
						"description": "Scope"
					},
					"tokenType": {
						"type": "string",
						"description": "Token Type",
						"example": "Bearer"
					}
				}
			},
			"User Refresh Token Response": {
				"title": "User Refresh Token Response",
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"description": "Access Token",
						"example": "eyJraWQiOiJlOWNjZDMyYy02OTllLTQ1MjItYjE1MC03MjM5ODRkODkzNDMi"
					},
					"error": {
						"type": "array",
						"description": "List of errors",
						"items": {
							"type": "string"
						}
					},
					"expiresIn": {
						"type": "integer",
						"description": "Time in seconds until the token expires",
						"format": "int32",
						"example": 35999
					},
					"idToken": {
						"type": "string",
						"description": "ID Token",
						"example": "eyJraWQiOiJlOWNjZDMyYcFgU6PAHo3-9RkODkzNDMi"
					},
					"refreshToken": {
						"type": "string",
						"description": "Refresh Token",
						"example": "3Lp8hM4I3iBZtyqVK7Lt4_DGtO1D3pd6Cryq1dzT44S5jTPNxhiE1ErPTQxg60or0vZAPhJYGtafSsv05keSgYcWryCUHGCfzlQ_1caPrNO_ixaLlgXhAPtQypMvTTHD"
					},
					"scope": {
						"type": "string",
						"description": "Scope"
					},
					"tokenType": {
						"type": "string",
						"description": "Token Type",
						"example": "Bearer"
					}
				}
			},
			"VehicleType": {
				"title": "VehicleType",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Vehicle Type Name"
					},
					"value": {
						"type": "string",
						"description": "Vehicle Type Value"
					}
				}
			},
			"getQuotationPrerequisite": {
				"title": "getQuotationPrerequisite",
				"type": "object",
				"properties": {
					"bnh": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PlaceVisit"
						}
					},
					"ens": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PlaceVisit"
						}
					},
					"mtr": {
						"description": "MTR motor plan types",
						"$ref": "#/components/schemas/MtrProduct"
					},
					"nib": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/nib"
						}
					},
					"pac": {
						"description": "PAC products and class details",
						"$ref": "#/components/schemas/PacProduct"
					},
					"ppa": {
						"description": "PPA details",
						"$ref": "#/components/schemas/PpaProduct"
					}
				}
			},
			"nib": {
				"title": "nib",
				"type": "object",
				"properties": {
					"productCode": {
						"type": "string",
						"description": "Product Code"
					},
					"productName": {
						"type": "string",
						"description": "Product Name"
					},
					"sumInsuredList": {
						"type": "array",
						"items": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			},
			"productList": {
				"title": "productList",
				"type": "object",
				"properties": {
					"ageLimitInfo": {
						"type": "string",
						"description": "Age Limit Information",
						"example": "Age limit is 16 years to 65 years"
					},
					"coverage": {
						"type": "string",
						"description": "Coverage",
						"example": "<ul _ngcontent-bcn-c140><li _ngcontent-bcn-c140> Accidental Death </li>"
					},
					"description": {
						"type": "string",
						"description": "Product Description",
						"example": "<p>Providing affordable comprehensive insurance coverage to females. Ensuring best Insurance Service in Urban and Rural area</p>"
					},
					"exclusion": {
						"type": "string",
						"description": "Exclusion",
						"example": "<ul _ngcontent-bcn-c140><li _ngcontent-bcn-c140> Pre-existing disability. </li>"
					},
					"hasSubProduct": {
						"type": "boolean",
						"description": "Whether the product has sub-products",
						"example": false
					},
					"id": {
						"type": "integer",
						"description": "Product ID",
						"format": "int32"
					},
					"keyfeature": {
						"type": "string",
						"description": "Key Features",
						"example": "<ul><li> </li><li> Ensuring best available insurance facilities </li><li>"
					},
					"productCode": {
						"type": "string",
						"description": "Product Code"
					},
					"productInfo": {
						"type": "string",
						"description": "Product Information",
						"example": "NIBEDITA"
					},
					"productName": {
						"type": "string",
						"description": "Product Name"
					},
					"subProductList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/SubProduct"
						}
					},
					"sumInsuredInfo": {
						"type": "string",
						"description": "Sum Insured Information",
						"example": "BDT 50,000 to BDT 2,00,000"
					},
					"title": {
						"type": "string",
						"description": "Product Title",
						"example": "<h2>Comprehensive Insurance Policy For Women</h2>"
					}
				}
			}
		}
	}
}